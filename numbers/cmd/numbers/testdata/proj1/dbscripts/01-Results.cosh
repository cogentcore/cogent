// Loads data for specific jobs results

func OpenResultFiles(jobs []string, filter FilterResults) {
	for i, jid := range jobs {
		jpath := filepath.Join(br.DataRoot, DataDir, jid)
		// fmt.Println(jid, jpath)
		fls := dirs.ExtFilenames(jpath, filter.Ext)
		ifls := []string{}
		for _, fn := range fls {
			if filter.FileContains != "" && !strings.Contains(fn, filter.FileContains) {
				continue
			}
			dt := table.NewTable()
			fpath := filepath.Join(jpath, fn)
			err := dt.OpenCSV(core.Filename(fpath), table.Tab)
			if err != nil {
				fmt.Println(err.Error())
			}
			Results = append(Results, &Result{JobID: jid, Path: fpath, Table: dt})
		}
	}
	if len(Results) == 0 {
		core.MessageSnackbar(br, "No files containing: " + filter.FileContains + " with extension: " + filter.Ext)
		return
	}
	ResultsTableView = br.NewTabTableView("Results", &Results)
	br.Update()
}

func OpenResults() {
	tv := JobsTableView
	jobs := tv.SelectedColumnStrings("JobID")
	if len(jobs) == 0 {
		fmt.Println("No Jobs rows selected")
		return
	}
	// fmt.Println(jobs)
	if Filter.Ext == "" {
		Filter.Ext = ".tsv"
	}
	databrowser.Prompt(br, &Filter, "Open results data for files", func() {
		OpenResultFiles(jobs, Filter)
	})
}

OpenResults()

