// Code generated by 'yaegi extract cogentcore.org/core/tensor/stats/norm'. DO NOT EDIT.

package imports

import (
	"cogentcore.org/core/tensor/stats/norm"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/stats/norm/norm"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs32":          reflect.ValueOf(norm.Abs32),
		"Abs64":          reflect.ValueOf(norm.Abs64),
		"AbsTensor":      reflect.ValueOf(norm.AbsTensor),
		"AddVec64":       reflect.ValueOf(norm.AddVec64),
		"AddVector32":    reflect.ValueOf(norm.AddVector32),
		"Binarize32":     reflect.ValueOf(norm.Binarize32),
		"Binarize64":     reflect.ValueOf(norm.Binarize64),
		"DivNorm32":      reflect.ValueOf(norm.DivNorm32),
		"DivNorm64":      reflect.ValueOf(norm.DivNorm64),
		"FloatFunc":      reflect.ValueOf(norm.FloatFunc),
		"FloatOnlyError": reflect.ValueOf(norm.FloatOnlyError),
		"MultVec64":      reflect.ValueOf(norm.MultVec64),
		"MultVector32":   reflect.ValueOf(norm.MultVector32),
		"SubNorm32":      reflect.ValueOf(norm.SubNorm32),
		"SubNorm64":      reflect.ValueOf(norm.SubNorm64),
		"TensorDivNorm":  reflect.ValueOf(norm.TensorDivNorm),
		"TensorSubNorm":  reflect.ValueOf(norm.TensorSubNorm),
		"TensorUnit":     reflect.ValueOf(norm.TensorUnit),
		"TensorZScore":   reflect.ValueOf(norm.TensorZScore),
		"Thresh32":       reflect.ValueOf(norm.Thresh32),
		"Thresh64":       reflect.ValueOf(norm.Thresh64),
		"Unit32":         reflect.ValueOf(norm.Unit32),
		"Unit64":         reflect.ValueOf(norm.Unit64),
		"ZScore32":       reflect.ValueOf(norm.ZScore32),
		"ZScore64":       reflect.ValueOf(norm.ZScore64),

		// type definitions
		"Func32": reflect.ValueOf((*norm.Func32)(nil)),
		"Func64": reflect.ValueOf((*norm.Func64)(nil)),
	}
}
