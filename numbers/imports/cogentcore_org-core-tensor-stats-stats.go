// Code generated by 'yaegi extract cogentcore.org/core/tensor/stats/stats'. DO NOT EDIT.

package imports

import (
	"cogentcore.org/core/tensor/stats/stats"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/stats/stats/stats"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Count":          reflect.ValueOf(stats.Count),
		"Count32":        reflect.ValueOf(stats.Count32),
		"Count64":        reflect.ValueOf(stats.Count64),
		"CountColumn":    reflect.ValueOf(stats.CountColumn),
		"CountFunc":      reflect.ValueOf(stats.CountFunc),
		"CountIfColumn":  reflect.ValueOf(stats.CountIfColumn),
		"CountIfIndex":   reflect.ValueOf(stats.CountIfIndex),
		"CountIndex":     reflect.ValueOf(stats.CountIndex),
		"CountTensor":    reflect.ValueOf(stats.CountTensor),
		"DescAll":        reflect.ValueOf(stats.DescAll),
		"DescColumn":     reflect.ValueOf(stats.DescColumn),
		"DescColumnTry":  reflect.ValueOf(stats.DescColumnTry),
		"DescIndex":      reflect.ValueOf(stats.DescIndex),
		"DescStats":      reflect.ValueOf(&stats.DescStats).Elem(),
		"DescStatsND":    reflect.ValueOf(&stats.DescStatsND).Elem(),
		"L1Norm":         reflect.ValueOf(stats.L1Norm),
		"L1Norm32":       reflect.ValueOf(stats.L1Norm32),
		"L1Norm64":       reflect.ValueOf(stats.L1Norm64),
		"L1NormColumn":   reflect.ValueOf(stats.L1NormColumn),
		"L1NormFunc":     reflect.ValueOf(stats.L1NormFunc),
		"L1NormIndex":    reflect.ValueOf(stats.L1NormIndex),
		"L1NormTensor":   reflect.ValueOf(stats.L1NormTensor),
		"L2Norm":         reflect.ValueOf(stats.L2Norm),
		"L2Norm32":       reflect.ValueOf(stats.L2Norm32),
		"L2Norm64":       reflect.ValueOf(stats.L2Norm64),
		"L2NormColumn":   reflect.ValueOf(stats.L2NormColumn),
		"L2NormIndex":    reflect.ValueOf(stats.L2NormIndex),
		"L2NormTensor":   reflect.ValueOf(stats.L2NormTensor),
		"Max":            reflect.ValueOf(stats.Max),
		"Max32":          reflect.ValueOf(stats.Max32),
		"Max64":          reflect.ValueOf(stats.Max64),
		"MaxAbs":         reflect.ValueOf(stats.MaxAbs),
		"MaxAbs32":       reflect.ValueOf(stats.MaxAbs32),
		"MaxAbs64":       reflect.ValueOf(stats.MaxAbs64),
		"MaxAbsColumn":   reflect.ValueOf(stats.MaxAbsColumn),
		"MaxAbsFunc":     reflect.ValueOf(stats.MaxAbsFunc),
		"MaxAbsIndex":    reflect.ValueOf(stats.MaxAbsIndex),
		"MaxAbsTensor":   reflect.ValueOf(stats.MaxAbsTensor),
		"MaxColumn":      reflect.ValueOf(stats.MaxColumn),
		"MaxFunc":        reflect.ValueOf(stats.MaxFunc),
		"MaxIndex":       reflect.ValueOf(stats.MaxIndex),
		"MaxIndex32":     reflect.ValueOf(stats.MaxIndex32),
		"MaxIndex64":     reflect.ValueOf(stats.MaxIndex64),
		"MaxTensor":      reflect.ValueOf(stats.MaxTensor),
		"Mean":           reflect.ValueOf(stats.Mean),
		"Mean32":         reflect.ValueOf(stats.Mean32),
		"Mean64":         reflect.ValueOf(stats.Mean64),
		"MeanColumn":     reflect.ValueOf(stats.MeanColumn),
		"MeanIndex":      reflect.ValueOf(stats.MeanIndex),
		"MeanTables":     reflect.ValueOf(stats.MeanTables),
		"MeanTensor":     reflect.ValueOf(stats.MeanTensor),
		"Median":         reflect.ValueOf(stats.Median),
		"MedianColumn":   reflect.ValueOf(stats.MedianColumn),
		"MedianIndex":    reflect.ValueOf(stats.MedianIndex),
		"Min":            reflect.ValueOf(stats.Min),
		"Min32":          reflect.ValueOf(stats.Min32),
		"Min64":          reflect.ValueOf(stats.Min64),
		"MinAbs":         reflect.ValueOf(stats.MinAbs),
		"MinAbs32":       reflect.ValueOf(stats.MinAbs32),
		"MinAbs64":       reflect.ValueOf(stats.MinAbs64),
		"MinAbsColumn":   reflect.ValueOf(stats.MinAbsColumn),
		"MinAbsFunc":     reflect.ValueOf(stats.MinAbsFunc),
		"MinAbsIndex":    reflect.ValueOf(stats.MinAbsIndex),
		"MinAbsTensor":   reflect.ValueOf(stats.MinAbsTensor),
		"MinColumn":      reflect.ValueOf(stats.MinColumn),
		"MinFunc":        reflect.ValueOf(stats.MinFunc),
		"MinIndex":       reflect.ValueOf(stats.MinIndex),
		"MinIndex32":     reflect.ValueOf(stats.MinIndex32),
		"MinIndex64":     reflect.ValueOf(stats.MinIndex64),
		"MinTensor":      reflect.ValueOf(stats.MinTensor),
		"PctIfColumn":    reflect.ValueOf(stats.PctIfColumn),
		"PctIfIndex":     reflect.ValueOf(stats.PctIfIndex),
		"Prod":           reflect.ValueOf(stats.Prod),
		"Prod32":         reflect.ValueOf(stats.Prod32),
		"Prod64":         reflect.ValueOf(stats.Prod64),
		"ProdColumn":     reflect.ValueOf(stats.ProdColumn),
		"ProdFunc":       reflect.ValueOf(stats.ProdFunc),
		"ProdIndex":      reflect.ValueOf(stats.ProdIndex),
		"ProdTensor":     reflect.ValueOf(stats.ProdTensor),
		"PropIfColumn":   reflect.ValueOf(stats.PropIfColumn),
		"PropIfIndex":    reflect.ValueOf(stats.PropIfIndex),
		"Q1":             reflect.ValueOf(stats.Q1),
		"Q1Column":       reflect.ValueOf(stats.Q1Column),
		"Q1Index":        reflect.ValueOf(stats.Q1Index),
		"Q3":             reflect.ValueOf(stats.Q3),
		"Q3Column":       reflect.ValueOf(stats.Q3Column),
		"Q3Index":        reflect.ValueOf(stats.Q3Index),
		"Quantiles":      reflect.ValueOf(stats.Quantiles),
		"QuantilesIndex": reflect.ValueOf(stats.QuantilesIndex),
		"Sem":            reflect.ValueOf(stats.Sem),
		"Sem32":          reflect.ValueOf(stats.Sem32),
		"Sem64":          reflect.ValueOf(stats.Sem64),
		"SemColumn":      reflect.ValueOf(stats.SemColumn),
		"SemIndex":       reflect.ValueOf(stats.SemIndex),
		"SemPop":         reflect.ValueOf(stats.SemPop),
		"SemPop32":       reflect.ValueOf(stats.SemPop32),
		"SemPop64":       reflect.ValueOf(stats.SemPop64),
		"SemPopColumn":   reflect.ValueOf(stats.SemPopColumn),
		"SemPopIndex":    reflect.ValueOf(stats.SemPopIndex),
		"SemPopTensor":   reflect.ValueOf(stats.SemPopTensor),
		"SemTensor":      reflect.ValueOf(stats.SemTensor),
		"Stat32":         reflect.ValueOf(stats.Stat32),
		"Stat64":         reflect.ValueOf(stats.Stat64),
		"StatColumn":     reflect.ValueOf(stats.StatColumn),
		"StatColumnTry":  reflect.ValueOf(stats.StatColumnTry),
		"StatIndex":      reflect.ValueOf(stats.StatIndex),
		"StatIndexFunc":  reflect.ValueOf(stats.StatIndexFunc),
		"StatTensor":     reflect.ValueOf(stats.StatTensor),
		"StatsN":         reflect.ValueOf(stats.StatsN),
		"StatsValues":    reflect.ValueOf(stats.StatsValues),
		"Std":            reflect.ValueOf(stats.Std),
		"Std32":          reflect.ValueOf(stats.Std32),
		"Std64":          reflect.ValueOf(stats.Std64),
		"StdColumn":      reflect.ValueOf(stats.StdColumn),
		"StdIndex":       reflect.ValueOf(stats.StdIndex),
		"StdPop":         reflect.ValueOf(stats.StdPop),
		"StdPop32":       reflect.ValueOf(stats.StdPop32),
		"StdPop64":       reflect.ValueOf(stats.StdPop64),
		"StdPopColumn":   reflect.ValueOf(stats.StdPopColumn),
		"StdPopIndex":    reflect.ValueOf(stats.StdPopIndex),
		"StdPopTensor":   reflect.ValueOf(stats.StdPopTensor),
		"StdTensor":      reflect.ValueOf(stats.StdTensor),
		"Sum":            reflect.ValueOf(stats.Sum),
		"Sum32":          reflect.ValueOf(stats.Sum32),
		"Sum64":          reflect.ValueOf(stats.Sum64),
		"SumColumn":      reflect.ValueOf(stats.SumColumn),
		"SumFunc":        reflect.ValueOf(stats.SumFunc),
		"SumIndex":       reflect.ValueOf(stats.SumIndex),
		"SumSq":          reflect.ValueOf(stats.SumSq),
		"SumSq32":        reflect.ValueOf(stats.SumSq32),
		"SumSq64":        reflect.ValueOf(stats.SumSq64),
		"SumSqColumn":    reflect.ValueOf(stats.SumSqColumn),
		"SumSqIndex":     reflect.ValueOf(stats.SumSqIndex),
		"SumSqTensor":    reflect.ValueOf(stats.SumSqTensor),
		"SumTensor":      reflect.ValueOf(stats.SumTensor),
		"TensorStat":     reflect.ValueOf(stats.TensorStat),
		"Var":            reflect.ValueOf(stats.Var),
		"Var32":          reflect.ValueOf(stats.Var32),
		"Var64":          reflect.ValueOf(stats.Var64),
		"VarColumn":      reflect.ValueOf(stats.VarColumn),
		"VarIndex":       reflect.ValueOf(stats.VarIndex),
		"VarPop":         reflect.ValueOf(stats.VarPop),
		"VarPop32":       reflect.ValueOf(stats.VarPop32),
		"VarPop64":       reflect.ValueOf(stats.VarPop64),
		"VarPopColumn":   reflect.ValueOf(stats.VarPopColumn),
		"VarPopIndex":    reflect.ValueOf(stats.VarPopIndex),
		"VarPopTensor":   reflect.ValueOf(stats.VarPopTensor),
		"VarTensor":      reflect.ValueOf(stats.VarTensor),

		// type definitions
		"IfFunc":              reflect.ValueOf((*stats.IfFunc)(nil)),
		"IndexViewFuncColumn": reflect.ValueOf((*stats.IndexViewFuncColumn)(nil)),
		"IndexViewFuncIndex":  reflect.ValueOf((*stats.IndexViewFuncIndex)(nil)),
		"StatFunc":            reflect.ValueOf((*stats.StatFunc)(nil)),
		"Stats":               reflect.ValueOf((*stats.Stats)(nil)),
	}
}
