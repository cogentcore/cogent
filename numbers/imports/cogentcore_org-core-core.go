// Code generated by 'yaegi extract cogentcore.org/core/core'. DO NOT EDIT.

package imports

import (
	"cogentcore.org/core/core"
	"cogentcore.org/core/enums"
	"cogentcore.org/core/events"
	"cogentcore.org/core/math32"
	"cogentcore.org/core/styles"
	"cogentcore.org/core/styles/abilities"
	"cogentcore.org/core/styles/states"
	"cogentcore.org/core/system"
	"cogentcore.org/core/tree"
	"cogentcore.org/core/types"
	"go/constant"
	"go/token"
	"image"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/core/core"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AddButtonItems":           reflect.ValueOf(core.AddButtonItems),
		"AddValueConverter":        reflect.ValueOf(core.AddValueConverter),
		"AllRenderWindows":         reflect.ValueOf(&core.AllRenderWindows).Elem(),
		"AllSettings":              reflect.ValueOf(&core.AllSettings).Elem(),
		"AppAbout":                 reflect.ValueOf(&core.AppAbout).Elem(),
		"AppBarBackMaker":          reflect.ValueOf(core.AppBarBackMaker),
		"AppBarChooserMaker":       reflect.ValueOf(core.AppBarChooserMaker),
		"AppColor":                 reflect.ValueOf(&core.AppColor).Elem(),
		"AppIcon":                  reflect.ValueOf(&core.AppIcon).Elem(),
		"AppIconImages":            reflect.ValueOf(core.AppIconImages),
		"AppIconImagesCache":       reflect.ValueOf(&core.AppIconImagesCache).Elem(),
		"AppearanceSettings":       reflect.ValueOf(&core.AppearanceSettings).Elem(),
		"AsButton":                 reflect.ValueOf(core.AsButton),
		"AsFrame":                  reflect.ValueOf(core.AsFrame),
		"AsTextField":              reflect.ValueOf(core.AsTextField),
		"AsWidget":                 reflect.ValueOf(core.AsWidget),
		"AsWidgetBase":             reflect.ValueOf(core.AsWidgetBase),
		"AutoScrollRate":           reflect.ValueOf(&core.AutoScrollRate).Elem(),
		"BasicBarType":             reflect.ValueOf(&core.BasicBarType).Elem(),
		"BodyType":                 reflect.ValueOf(&core.BodyType).Elem(),
		"ButtonAction":             reflect.ValueOf(core.ButtonAction),
		"ButtonElevated":           reflect.ValueOf(core.ButtonElevated),
		"ButtonFilled":             reflect.ValueOf(core.ButtonFilled),
		"ButtonMenu":               reflect.ValueOf(core.ButtonMenu),
		"ButtonOutlined":           reflect.ValueOf(core.ButtonOutlined),
		"ButtonText":               reflect.ValueOf(core.ButtonText),
		"ButtonTonal":              reflect.ValueOf(core.ButtonTonal),
		"ButtonType":               reflect.ValueOf(&core.ButtonType).Elem(),
		"ButtonTypesN":             reflect.ValueOf(core.ButtonTypesN),
		"ButtonTypesValues":        reflect.ValueOf(core.ButtonTypesValues),
		"CanvasType":               reflect.ValueOf(&core.CanvasType).Elem(),
		"ChildByLabelCanFocus":     reflect.ValueOf(core.ChildByLabelCanFocus),
		"ChooserFilled":            reflect.ValueOf(core.ChooserFilled),
		"ChooserOutlined":          reflect.ValueOf(core.ChooserOutlined),
		"ChooserType":              reflect.ValueOf(&core.ChooserType).Elem(),
		"ChooserTypesN":            reflect.ValueOf(core.ChooserTypesN),
		"ChooserTypesValues":       reflect.ValueOf(core.ChooserTypesValues),
		"CompleteEditText":         reflect.ValueOf(core.CompleteEditText),
		"CompleteExtend":           reflect.ValueOf(core.CompleteExtend),
		"CompleteSelect":           reflect.ValueOf(core.CompleteSelect),
		"CompleteSignalsN":         reflect.ValueOf(core.CompleteSignalsN),
		"CompleteSignalsValues":    reflect.ValueOf(core.CompleteSignalsValues),
		"CompleterStage":           reflect.ValueOf(core.CompleterStage),
		"ConcealDots":              reflect.ValueOf(core.ConcealDots),
		"ConfigAppChooser":         reflect.ValueOf(core.ConfigAppChooser),
		"CurrentRenderWindow":      reflect.ValueOf(&core.CurrentRenderWindow).Elem(),
		"DebugSettings":            reflect.ValueOf(&core.DebugSettings).Elem(),
		"DefaultPaths":             reflect.ValueOf(&core.DefaultPaths).Elem(),
		"DeviceSettings":           reflect.ValueOf(&core.DeviceSettings).Elem(),
		"DialogRenderWindows":      reflect.ValueOf(&core.DialogRenderWindows).Elem(),
		"DialogStage":              reflect.ValueOf(core.DialogStage),
		"DragSpriteName":           reflect.ValueOf(constant.MakeFromLiteral("\"__DragSprite__\"", token.STRING, 0)),
		"EndCPUMemoryProfile":      reflect.ValueOf(core.EndCPUMemoryProfile),
		"EndTargetedProfile":       reflect.ValueOf(core.EndTargetedProfile),
		"ErrorDialog":              reflect.ValueOf(core.ErrorDialog),
		"ErrorSnackbar":            reflect.ValueOf(core.ErrorSnackbar),
		"ForceAppColor":            reflect.ValueOf(&core.ForceAppColor).Elem(),
		"FrameFlagsN":              reflect.ValueOf(core.FrameFlagsN),
		"FrameFlagsValues":         reflect.ValueOf(core.FrameFlagsValues),
		"FrameStackTopOnly":        reflect.ValueOf(core.FrameStackTopOnly),
		"FrameType":                reflect.ValueOf(&core.FrameType).Elem(),
		"FunctionalTabs":           reflect.ValueOf(core.FunctionalTabs),
		"GrabRenderFrom":           reflect.ValueOf(core.GrabRenderFrom),
		"HandleRecover":            reflect.ValueOf(core.HandleRecover),
		"HandleType":               reflect.ValueOf(&core.HandleType).Elem(),
		"IconType":                 reflect.ValueOf(&core.IconType).Elem(),
		"ImageType":                reflect.ValueOf(&core.ImageType).Elem(),
		"InitParts":                reflect.ValueOf(core.InitParts),
		"InitValueButton":          reflect.ValueOf(core.InitValueButton),
		"InspectorWindow":          reflect.ValueOf(&core.InspectorWindow).Elem(),
		"IsWordBreak":              reflect.ValueOf(core.IsWordBreak),
		"JoinValueTitle":           reflect.ValueOf(core.JoinValueTitle),
		"LayoutLastAutoScroll":     reflect.ValueOf(&core.LayoutLastAutoScroll).Elem(),
		"LayoutPassesN":            reflect.ValueOf(core.LayoutPassesN),
		"LayoutPassesValues":       reflect.ValueOf(core.LayoutPassesValues),
		"LoadAllSettings":          reflect.ValueOf(core.LoadAllSettings),
		"LoadSettings":             reflect.ValueOf(core.LoadSettings),
		"MainRenderWindows":        reflect.ValueOf(&core.MainRenderWindows).Elem(),
		"MaxSpriteTextures":        reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"MaxSpritesPerTexture":     reflect.ValueOf(constant.MakeFromLiteral("128", token.INT, 0)),
		"MenuSceneConfigStyles":    reflect.ValueOf(core.MenuSceneConfigStyles),
		"MenuStage":                reflect.ValueOf(core.MenuStage),
		"MessageDialog":            reflect.ValueOf(core.MessageDialog),
		"MessageSnackbar":          reflect.ValueOf(core.MessageSnackbar),
		"MeterCircle":              reflect.ValueOf(core.MeterCircle),
		"MeterLinear":              reflect.ValueOf(core.MeterLinear),
		"MeterSemicircle":          reflect.ValueOf(core.MeterSemicircle),
		"MeterType":                reflect.ValueOf(&core.MeterType).Elem(),
		"MeterTypesN":              reflect.ValueOf(core.MeterTypesN),
		"MeterTypesValues":         reflect.ValueOf(core.MeterTypesValues),
		"NavigationAuto":           reflect.ValueOf(core.NavigationAuto),
		"NavigationBar":            reflect.ValueOf(core.NavigationBar),
		"NavigationDrawer":         reflect.ValueOf(core.NavigationDrawer),
		"NavigationRail":           reflect.ValueOf(core.NavigationRail),
		"NeedsRender":              reflect.ValueOf(core.NeedsRender),
		"NewBasicBar":              reflect.ValueOf(core.NewBasicBar),
		"NewBody":                  reflect.ValueOf(core.NewBody),
		"NewBodyScene":             reflect.ValueOf(core.NewBodyScene),
		"NewButton":                reflect.ValueOf(core.NewButton),
		"NewCanvas":                reflect.ValueOf(core.NewCanvas),
		"NewChooser":               reflect.ValueOf(core.NewChooser),
		"NewComplete":              reflect.ValueOf(core.NewComplete),
		"NewFrame":                 reflect.ValueOf(core.NewFrame),
		"NewHandle":                reflect.ValueOf(core.NewHandle),
		"NewIcon":                  reflect.ValueOf(core.NewIcon),
		"NewImage":                 reflect.ValueOf(core.NewImage),
		"NewMainStage":             reflect.ValueOf(core.NewMainStage),
		"NewMenu":                  reflect.ValueOf(core.NewMenu),
		"NewMenuFromStrings":       reflect.ValueOf(core.NewMenuFromStrings),
		"NewMenuScene":             reflect.ValueOf(core.NewMenuScene),
		"NewMenuStage":             reflect.ValueOf(core.NewMenuStage),
		"NewMeter":                 reflect.ValueOf(core.NewMeter),
		"NewPopupStage":            reflect.ValueOf(core.NewPopupStage),
		"NewRenderContext":         reflect.ValueOf(core.NewRenderContext),
		"NewRenderWindow":          reflect.ValueOf(core.NewRenderWindow),
		"NewSVG":                   reflect.ValueOf(core.NewSVG),
		"NewScene":                 reflect.ValueOf(core.NewScene),
		"NewScrim":                 reflect.ValueOf(core.NewScrim),
		"NewSeparator":             reflect.ValueOf(core.NewSeparator),
		"NewSlider":                reflect.ValueOf(core.NewSlider),
		"NewSpace":                 reflect.ValueOf(core.NewSpace),
		"NewSpinner":               reflect.ValueOf(core.NewSpinner),
		"NewSplits":                reflect.ValueOf(core.NewSplits),
		"NewSprite":                reflect.ValueOf(core.NewSprite),
		"NewStretch":               reflect.ValueOf(core.NewStretch),
		"NewSwitch":                reflect.ValueOf(core.NewSwitch),
		"NewSwitches":              reflect.ValueOf(core.NewSwitches),
		"NewTabs":                  reflect.ValueOf(core.NewTabs),
		"NewText":                  reflect.ValueOf(core.NewText),
		"NewTextField":             reflect.ValueOf(core.NewTextField),
		"NewToolbar":               reflect.ValueOf(core.NewToolbar),
		"NewTooltip":               reflect.ValueOf(core.NewTooltip),
		"NewTooltipFromScene":      reflect.ValueOf(core.NewTooltipFromScene),
		"NewTooltipScene":          reflect.ValueOf(core.NewTooltipScene),
		"NewTooltipTextSize":       reflect.ValueOf(core.NewTooltipTextSize),
		"NewValue":                 reflect.ValueOf(core.NewValue),
		"NewWidgetBase":            reflect.ValueOf(core.NewWidgetBase),
		"OpenRecentPaths":          reflect.ValueOf(core.OpenRecentPaths),
		"OpenSettings":             reflect.ValueOf(core.OpenSettings),
		"OpenValueDialog":          reflect.ValueOf(core.OpenValueDialog),
		"ParentToolbar":            reflect.ValueOf(core.ParentToolbar),
		"ProfileToggle":            reflect.ValueOf(core.ProfileToggle),
		"RecentPaths":              reflect.ValueOf(&core.RecentPaths).Elem(),
		"RecycleDialog":            reflect.ValueOf(core.RecycleDialog),
		"RecycleMainWindow":        reflect.ValueOf(core.RecycleMainWindow),
		"RecycleToolbar":           reflect.ValueOf(core.RecycleToolbar),
		"RenderContextFlagsN":      reflect.ValueOf(core.RenderContextFlagsN),
		"RenderContextFlagsValues": reflect.ValueOf(core.RenderContextFlagsValues),
		"RenderRebuild":            reflect.ValueOf(core.RenderRebuild),
		"RenderVisible":            reflect.ValueOf(core.RenderVisible),
		"RenderWindowGlobalMu":     reflect.ValueOf(&core.RenderWindowGlobalMu).Elem(),
		"ResetAllSettings":         reflect.ValueOf(core.ResetAllSettings),
		"ResetSettings":            reflect.ValueOf(core.ResetSettings),
		"SVGType":                  reflect.ValueOf(&core.SVGType).Elem(),
		"SaveAllSettings":          reflect.ValueOf(core.SaveAllSettings),
		"SaveRecentPaths":          reflect.ValueOf(core.SaveRecentPaths),
		"SaveSettings":             reflect.ValueOf(core.SaveSettings),
		"SavedPathsFilename":       reflect.ValueOf(&core.SavedPathsFilename).Elem(),
		"ScFlagsN":                 reflect.ValueOf(core.ScFlagsN),
		"ScFlagsValues":            reflect.ValueOf(core.ScFlagsValues),
		"ScImageUpdated":           reflect.ValueOf(core.ScImageUpdated),
		"ScNeedsLayout":            reflect.ValueOf(core.ScNeedsLayout),
		"ScNeedsRebuild":           reflect.ValueOf(core.ScNeedsRebuild),
		"ScNeedsRender":            reflect.ValueOf(core.ScNeedsRender),
		"ScPrefSizing":             reflect.ValueOf(core.ScPrefSizing),
		"ScPreserve":               reflect.ValueOf(core.ScPreserve),
		"ScRenderBBoxes":           reflect.ValueOf(core.ScRenderBBoxes),
		"ScUpdating":               reflect.ValueOf(core.ScUpdating),
		"SceneShowIters":           reflect.ValueOf(&core.SceneShowIters).Elem(),
		"SceneType":                reflect.ValueOf(&core.SceneType).Elem(),
		"ScrimType":                reflect.ValueOf(&core.ScrimType).Elem(),
		"SeparatorType":            reflect.ValueOf(&core.SeparatorType).Elem(),
		"SetUnitContext":           reflect.ValueOf(core.SetUnitContext),
		"SettingsWindow":           reflect.ValueOf(&core.SettingsWindow).Elem(),
		"SizeClassesN":             reflect.ValueOf(core.SizeClassesN),
		"SizeClassesValues":        reflect.ValueOf(core.SizeClassesValues),
		"SizeCompact":              reflect.ValueOf(core.SizeCompact),
		"SizeDownPass":             reflect.ValueOf(core.SizeDownPass),
		"SizeExpanded":             reflect.ValueOf(core.SizeExpanded),
		"SizeFinalPass":            reflect.ValueOf(core.SizeFinalPass),
		"SizeMedium":               reflect.ValueOf(core.SizeMedium),
		"SizeUpPass":               reflect.ValueOf(core.SizeUpPass),
		"SliderScrollbar":          reflect.ValueOf(core.SliderScrollbar),
		"SliderSlider":             reflect.ValueOf(core.SliderSlider),
		"SliderType":               reflect.ValueOf(&core.SliderType).Elem(),
		"SliderTypesN":             reflect.ValueOf(core.SliderTypesN),
		"SliderTypesValues":        reflect.ValueOf(core.SliderTypesValues),
		"SnackbarStage":            reflect.ValueOf(core.SnackbarStage),
		"SpaceType":                reflect.ValueOf(&core.SpaceType).Elem(),
		"SpinnerType":              reflect.ValueOf(&core.SpinnerType).Elem(),
		"SplitsType":               reflect.ValueOf(&core.SplitsType).Elem(),
		"SpriteStart":              reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"StageTypesN":              reflect.ValueOf(core.StageTypesN),
		"StageTypesValues":         reflect.ValueOf(core.StageTypesValues),
		"StandardAppBarConfig":     reflect.ValueOf(core.StandardAppBarConfig),
		"StandardAppBarMaker":      reflect.ValueOf(core.StandardAppBarMaker),
		"StandardOverflowMenu":     reflect.ValueOf(core.StandardOverflowMenu),
		"StandardTabs":             reflect.ValueOf(core.StandardTabs),
		"StartCPUMemoryProfile":    reflect.ValueOf(core.StartCPUMemoryProfile),
		"StartTargetedProfile":     reflect.ValueOf(core.StartTargetedProfile),
		"StretchType":              reflect.ValueOf(&core.StretchType).Elem(),
		"StringsInsertFirstUnique": reflect.ValueOf(core.StringsInsertFirstUnique),
		"StyleFromTags":            reflect.ValueOf(core.StyleFromTags),
		"SwitchCheckbox":           reflect.ValueOf(core.SwitchCheckbox),
		"SwitchChip":               reflect.ValueOf(core.SwitchChip),
		"SwitchRadioButton":        reflect.ValueOf(core.SwitchRadioButton),
		"SwitchSegmentedButton":    reflect.ValueOf(core.SwitchSegmentedButton),
		"SwitchSwitch":             reflect.ValueOf(core.SwitchSwitch),
		"SwitchType":               reflect.ValueOf(&core.SwitchType).Elem(),
		"SwitchTypesN":             reflect.ValueOf(core.SwitchTypesN),
		"SwitchTypesValues":        reflect.ValueOf(core.SwitchTypesValues),
		"SwitchesType":             reflect.ValueOf(&core.SwitchesType).Elem(),
		"SystemSettings":           reflect.ValueOf(&core.SystemSettings).Elem(),
		"TabType":                  reflect.ValueOf(&core.TabType).Elem(),
		"TabTypesN":                reflect.ValueOf(core.TabTypesN),
		"TabTypesValues":           reflect.ValueOf(core.TabTypesValues),
		"TabsType":                 reflect.ValueOf(&core.TabsType).Elem(),
		"TextBodyLarge":            reflect.ValueOf(core.TextBodyLarge),
		"TextBodyMedium":           reflect.ValueOf(core.TextBodyMedium),
		"TextBodySmall":            reflect.ValueOf(core.TextBodySmall),
		"TextDisplayLarge":         reflect.ValueOf(core.TextDisplayLarge),
		"TextDisplayMedium":        reflect.ValueOf(core.TextDisplayMedium),
		"TextDisplaySmall":         reflect.ValueOf(core.TextDisplaySmall),
		"TextFieldBlinker":         reflect.ValueOf(&core.TextFieldBlinker).Elem(),
		"TextFieldFilled":          reflect.ValueOf(core.TextFieldFilled),
		"TextFieldOutlined":        reflect.ValueOf(core.TextFieldOutlined),
		"TextFieldSpriteName":      reflect.ValueOf(&core.TextFieldSpriteName).Elem(),
		"TextFieldType":            reflect.ValueOf(&core.TextFieldType).Elem(),
		"TextFieldTypesN":          reflect.ValueOf(core.TextFieldTypesN),
		"TextFieldTypesValues":     reflect.ValueOf(core.TextFieldTypesValues),
		"TextHeadlineLarge":        reflect.ValueOf(core.TextHeadlineLarge),
		"TextHeadlineMedium":       reflect.ValueOf(core.TextHeadlineMedium),
		"TextHeadlineSmall":        reflect.ValueOf(core.TextHeadlineSmall),
		"TextLabelLarge":           reflect.ValueOf(core.TextLabelLarge),
		"TextLabelMedium":          reflect.ValueOf(core.TextLabelMedium),
		"TextLabelSmall":           reflect.ValueOf(core.TextLabelSmall),
		"TextTitleLarge":           reflect.ValueOf(core.TextTitleLarge),
		"TextTitleMedium":          reflect.ValueOf(core.TextTitleMedium),
		"TextTitleSmall":           reflect.ValueOf(core.TextTitleSmall),
		"TextType":                 reflect.ValueOf(&core.TextType).Elem(),
		"TextTypesN":               reflect.ValueOf(core.TextTypesN),
		"TextTypesValues":          reflect.ValueOf(core.TextTypesValues),
		"TheApp":                   reflect.ValueOf(&core.TheApp).Elem(),
		"TheWindowGeometrySaver":   reflect.ValueOf(&core.TheWindowGeometrySaver).Elem(),
		"ThemeAuto":                reflect.ValueOf(core.ThemeAuto),
		"ThemeDark":                reflect.ValueOf(core.ThemeDark),
		"ThemeLight":               reflect.ValueOf(core.ThemeLight),
		"ThemesN":                  reflect.ValueOf(core.ThemesN),
		"ThemesValues":             reflect.ValueOf(core.ThemesValues),
		"ToValue":                  reflect.ValueOf(core.ToValue),
		"ToolbarStyles":            reflect.ValueOf(core.ToolbarStyles),
		"ToolbarType":              reflect.ValueOf(&core.ToolbarType).Elem(),
		"TooltipStage":             reflect.ValueOf(core.TooltipStage),
		"UpdateAll":                reflect.ValueOf(core.UpdateAll),
		"UpdateSettings":           reflect.ValueOf(core.UpdateSettings),
		"ValueConverters":          reflect.ValueOf(&core.ValueConverters).Elem(),
		"ValueDialogNewWindow":     reflect.ValueOf(core.ValueDialogNewWindow),
		"ValueTypes":               reflect.ValueOf(&core.ValueTypes).Elem(),
		"Wait":                     reflect.ValueOf(core.Wait),
		"WidgetBaseType":           reflect.ValueOf(&core.WidgetBaseType).Elem(),
		"WidgetFlagsN":             reflect.ValueOf(core.WidgetFlagsN),
		"WidgetFlagsValues":        reflect.ValueOf(core.WidgetFlagsValues),
		"WidgetLastChild":          reflect.ValueOf(core.WidgetLastChild),
		"WidgetLastChildParts":     reflect.ValueOf(core.WidgetLastChildParts),
		"WidgetNext":               reflect.ValueOf(core.WidgetNext),
		"WidgetNextFunc":           reflect.ValueOf(core.WidgetNextFunc),
		"WidgetNextSibling":        reflect.ValueOf(core.WidgetNextSibling),
		"WidgetPrev":               reflect.ValueOf(core.WidgetPrev),
		"WidgetPrevFunc":           reflect.ValueOf(core.WidgetPrevFunc),
		"WindowClosing":            reflect.ValueOf(core.WindowClosing),
		"WindowFlagsN":             reflect.ValueOf(core.WindowFlagsN),
		"WindowFlagsValues":        reflect.ValueOf(core.WindowFlagsValues),
		"WindowGotFocus":           reflect.ValueOf(core.WindowGotFocus),
		"WindowHasSavedGeom":       reflect.ValueOf(core.WindowHasSavedGeom),
		"WindowResizing":           reflect.ValueOf(core.WindowResizing),
		"WindowSelectionMode":      reflect.ValueOf(core.WindowSelectionMode),
		"WindowSentShow":           reflect.ValueOf(core.WindowSentShow),
		"WindowStage":              reflect.ValueOf(core.WindowStage),
		"WindowStopEventLoop":      reflect.ValueOf(core.WindowStopEventLoop),
		"WindowWait":               reflect.ValueOf(&core.WindowWait).Elem(),

		// type definitions
		"App":                    reflect.ValueOf((*core.App)(nil)),
		"AppearanceSettingsData": reflect.ValueOf((*core.AppearanceSettingsData)(nil)),
		"BarFuncs":               reflect.ValueOf((*core.BarFuncs)(nil)),
		"BasicBar":               reflect.ValueOf((*core.BasicBar)(nil)),
		"Blinker":                reflect.ValueOf((*core.Blinker)(nil)),
		"Body":                   reflect.ValueOf((*core.Body)(nil)),
		"Button":                 reflect.ValueOf((*core.Button)(nil)),
		"ButtonEmbedder":         reflect.ValueOf((*core.ButtonEmbedder)(nil)),
		"ButtonTypes":            reflect.ValueOf((*core.ButtonTypes)(nil)),
		"Canvas":                 reflect.ValueOf((*core.Canvas)(nil)),
		"Chooser":                reflect.ValueOf((*core.Chooser)(nil)),
		"ChooserItem":            reflect.ValueOf((*core.ChooserItem)(nil)),
		"ChooserTypes":           reflect.ValueOf((*core.ChooserTypes)(nil)),
		"Complete":               reflect.ValueOf((*core.Complete)(nil)),
		"CompleteSignals":        reflect.ValueOf((*core.CompleteSignals)(nil)),
		"DebugSettingsData":      reflect.ValueOf((*core.DebugSettingsData)(nil)),
		"DeviceSettingsData":     reflect.ValueOf((*core.DeviceSettingsData)(nil)),
		"EditorSettings":         reflect.ValueOf((*core.EditorSettings)(nil)),
		"Events":                 reflect.ValueOf((*core.Events)(nil)),
		"FavPathItem":            reflect.ValueOf((*core.FavPathItem)(nil)),
		"FavPaths":               reflect.ValueOf((*core.FavPaths)(nil)),
		"FieldValidator":         reflect.ValueOf((*core.FieldValidator)(nil)),
		"FilePaths":              reflect.ValueOf((*core.FilePaths)(nil)),
		"Filename":               reflect.ValueOf((*core.Filename)(nil)),
		"FontName":               reflect.ValueOf((*core.FontName)(nil)),
		"Frame":                  reflect.ValueOf((*core.Frame)(nil)),
		"FrameFlags":             reflect.ValueOf((*core.FrameFlags)(nil)),
		"GeomCT":                 reflect.ValueOf((*core.GeomCT)(nil)),
		"GeomSize":               reflect.ValueOf((*core.GeomSize)(nil)),
		"GeomState":              reflect.ValueOf((*core.GeomState)(nil)),
		"Handle":                 reflect.ValueOf((*core.Handle)(nil)),
		"HiStyleName":            reflect.ValueOf((*core.HiStyleName)(nil)),
		"Icon":                   reflect.ValueOf((*core.Icon)(nil)),
		"Image":                  reflect.ValueOf((*core.Image)(nil)),
		"LayCell":                reflect.ValueOf((*core.LayCell)(nil)),
		"LayCells":               reflect.ValueOf((*core.LayCells)(nil)),
		"LayImplState":           reflect.ValueOf((*core.LayImplState)(nil)),
		"LayoutPasses":           reflect.ValueOf((*core.LayoutPasses)(nil)),
		"Layouter":               reflect.ValueOf((*core.Layouter)(nil)),
		"Meter":                  reflect.ValueOf((*core.Meter)(nil)),
		"MeterTypes":             reflect.ValueOf((*core.MeterTypes)(nil)),
		"NewItemsData":           reflect.ValueOf((*core.NewItemsData)(nil)),
		"OnBinder":               reflect.ValueOf((*core.OnBinder)(nil)),
		"Plan":                   reflect.ValueOf((*core.Plan)(nil)),
		"PlanItem":               reflect.ValueOf((*core.PlanItem)(nil)),
		"RenderContext":          reflect.ValueOf((*core.RenderContext)(nil)),
		"RenderContextFlags":     reflect.ValueOf((*core.RenderContextFlags)(nil)),
		"RenderParams":           reflect.ValueOf((*core.RenderParams)(nil)),
		"RenderScenes":           reflect.ValueOf((*core.RenderScenes)(nil)),
		"RenderWindow":           reflect.ValueOf((*core.RenderWindow)(nil)),
		"RenderWindowList":       reflect.ValueOf((*core.RenderWindowList)(nil)),
		"SVG":                    reflect.ValueOf((*core.SVG)(nil)),
		"ScFlags":                reflect.ValueOf((*core.ScFlags)(nil)),
		"Scene":                  reflect.ValueOf((*core.Scene)(nil)),
		"ScreenSettings":         reflect.ValueOf((*core.ScreenSettings)(nil)),
		"Scrim":                  reflect.ValueOf((*core.Scrim)(nil)),
		"Separator":              reflect.ValueOf((*core.Separator)(nil)),
		"Settings":               reflect.ValueOf((*core.Settings)(nil)),
		"SettingsBase":           reflect.ValueOf((*core.SettingsBase)(nil)),
		"SettingsOpener":         reflect.ValueOf((*core.SettingsOpener)(nil)),
		"SettingsSaver":          reflect.ValueOf((*core.SettingsSaver)(nil)),
		"Shortcuts":              reflect.ValueOf((*core.Shortcuts)(nil)),
		"ShouldShower":           reflect.ValueOf((*core.ShouldShower)(nil)),
		"SizeClasses":            reflect.ValueOf((*core.SizeClasses)(nil)),
		"Slider":                 reflect.ValueOf((*core.Slider)(nil)),
		"SliderTypes":            reflect.ValueOf((*core.SliderTypes)(nil)),
		"Space":                  reflect.ValueOf((*core.Space)(nil)),
		"Spinner":                reflect.ValueOf((*core.Spinner)(nil)),
		"Splits":                 reflect.ValueOf((*core.Splits)(nil)),
		"Sprite":                 reflect.ValueOf((*core.Sprite)(nil)),
		"Sprites":                reflect.ValueOf((*core.Sprites)(nil)),
		"Stage":                  reflect.ValueOf((*core.Stage)(nil)),
		"StageTypes":             reflect.ValueOf((*core.StageTypes)(nil)),
		"Stages":                 reflect.ValueOf((*core.Stages)(nil)),
		"Stretch":                reflect.ValueOf((*core.Stretch)(nil)),
		"Switch":                 reflect.ValueOf((*core.Switch)(nil)),
		"SwitchItem":             reflect.ValueOf((*core.SwitchItem)(nil)),
		"SwitchTypes":            reflect.ValueOf((*core.SwitchTypes)(nil)),
		"Switches":               reflect.ValueOf((*core.Switches)(nil)),
		"SystemSettingsData":     reflect.ValueOf((*core.SystemSettingsData)(nil)),
		"Tab":                    reflect.ValueOf((*core.Tab)(nil)),
		"TabTypes":               reflect.ValueOf((*core.TabTypes)(nil)),
		"Tabs":                   reflect.ValueOf((*core.Tabs)(nil)),
		"Text":                   reflect.ValueOf((*core.Text)(nil)),
		"TextField":              reflect.ValueOf((*core.TextField)(nil)),
		"TextFieldEmbedder":      reflect.ValueOf((*core.TextFieldEmbedder)(nil)),
		"TextFieldTypes":         reflect.ValueOf((*core.TextFieldTypes)(nil)),
		"TextFieldUndoRecord":    reflect.ValueOf((*core.TextFieldUndoRecord)(nil)),
		"TextFieldUndos":         reflect.ValueOf((*core.TextFieldUndos)(nil)),
		"TextTypes":              reflect.ValueOf((*core.TextTypes)(nil)),
		"Themes":                 reflect.ValueOf((*core.Themes)(nil)),
		"Toolbar":                reflect.ValueOf((*core.Toolbar)(nil)),
		"ToolbarMaker":           reflect.ValueOf((*core.ToolbarMaker)(nil)),
		"User":                   reflect.ValueOf((*core.User)(nil)),
		"Validator":              reflect.ValueOf((*core.Validator)(nil)),
		"Value":                  reflect.ValueOf((*core.Value)(nil)),
		"ValueSetter":            reflect.ValueOf((*core.ValueSetter)(nil)),
		"Valuer":                 reflect.ValueOf((*core.Valuer)(nil)),
		"Widget":                 reflect.ValueOf((*core.Widget)(nil)),
		"WidgetBase":             reflect.ValueOf((*core.WidgetBase)(nil)),
		"WidgetFlags":            reflect.ValueOf((*core.WidgetFlags)(nil)),
		"WindowFlags":            reflect.ValueOf((*core.WindowFlags)(nil)),
		"WindowGeometries":       reflect.ValueOf((*core.WindowGeometries)(nil)),
		"WindowGeometry":         reflect.ValueOf((*core.WindowGeometry)(nil)),
		"WindowGeometrySaver":    reflect.ValueOf((*core.WindowGeometrySaver)(nil)),

		// interface wrapper definitions
		"_ButtonEmbedder":    reflect.ValueOf((*_cogentcore_org_core_core_ButtonEmbedder)(nil)),
		"_FieldValidator":    reflect.ValueOf((*_cogentcore_org_core_core_FieldValidator)(nil)),
		"_Layouter":          reflect.ValueOf((*_cogentcore_org_core_core_Layouter)(nil)),
		"_OnBinder":          reflect.ValueOf((*_cogentcore_org_core_core_OnBinder)(nil)),
		"_Settings":          reflect.ValueOf((*_cogentcore_org_core_core_Settings)(nil)),
		"_SettingsOpener":    reflect.ValueOf((*_cogentcore_org_core_core_SettingsOpener)(nil)),
		"_SettingsSaver":     reflect.ValueOf((*_cogentcore_org_core_core_SettingsSaver)(nil)),
		"_ShouldShower":      reflect.ValueOf((*_cogentcore_org_core_core_ShouldShower)(nil)),
		"_TextFieldEmbedder": reflect.ValueOf((*_cogentcore_org_core_core_TextFieldEmbedder)(nil)),
		"_ToolbarMaker":      reflect.ValueOf((*_cogentcore_org_core_core_ToolbarMaker)(nil)),
		"_Validator":         reflect.ValueOf((*_cogentcore_org_core_core_Validator)(nil)),
		"_Value":             reflect.ValueOf((*_cogentcore_org_core_core_Value)(nil)),
		"_ValueSetter":       reflect.ValueOf((*_cogentcore_org_core_core_ValueSetter)(nil)),
		"_Valuer":            reflect.ValueOf((*_cogentcore_org_core_core_Valuer)(nil)),
		"_Widget":            reflect.ValueOf((*_cogentcore_org_core_core_Widget)(nil)),
	}
}

// _cogentcore_org_core_core_ButtonEmbedder is an interface wrapper for ButtonEmbedder type
type _cogentcore_org_core_core_ButtonEmbedder struct {
	IValue    interface{}
	WAsButton func() *core.Button
}

func (W _cogentcore_org_core_core_ButtonEmbedder) AsButton() *core.Button {
	return W.WAsButton()
}

// _cogentcore_org_core_core_FieldValidator is an interface wrapper for FieldValidator type
type _cogentcore_org_core_core_FieldValidator struct {
	IValue         interface{}
	WValidateField func(field string) error
}

func (W _cogentcore_org_core_core_FieldValidator) ValidateField(field string) error {
	return W.WValidateField(field)
}

// _cogentcore_org_core_core_Layouter is an interface wrapper for Layouter type
type _cogentcore_org_core_core_Layouter struct {
	IValue             interface{}
	WAbilityIs         func(flag abilities.Abilities) bool
	WAddContextMenu    func(menu func(m *core.Scene)) *core.WidgetBase
	WApplyContextMenus func(m *core.Scene)
	WApplyStyle        func()
	WAsFrame           func() *core.Frame
	WAsTree            func() *tree.NodeBase
	WAsWidget          func() *core.WidgetBase
	WBaseType          func() *types.Type
	WChild             func(i int) tree.Node
	WChildBackground   func(child core.Widget) image.Image
	WChildByName       func(name string, startIndex ...int) tree.Node
	WClone             func() tree.Node
	WContextMenuPos    func(e events.Event) image.Point
	WCopyFieldsFrom    func(from tree.Node)
	WCopyFrom          func(src tree.Node)
	WDestroy           func()
	WDirectRenderDraw  func(drw system.Drawer, idx int, flipY bool)
	WDirectRenderImage func(drw system.Drawer, idx int)
	WFieldByName       func(field string) (tree.Node, error)
	WFindPath          func(path string) tree.Node
	WFlagType          func() enums.BitFlagSetter
	WHandleEvent       func(e events.Event)
	WHasChildren       func() bool
	WInit              func()
	WIs                func(f enums.BitFlag) bool
	WIsVisible         func() bool
	WLayoutSpace       func()
	WManageOverflow    func(iter int, updateSize bool) bool
	WName              func() string
	WNew               func() tree.Node
	WNodeType          func() *types.Type
	WNodeWalkDown      func(fun func(n tree.Node) bool)
	WNumChildren       func() int
	WOn                func(etype events.Types, fun func(e events.Event)) *core.WidgetBase
	WOnAdd             func()
	WOnChildAdded      func(child tree.Node)
	WOnClick           func(fun func(e events.Event)) *core.WidgetBase
	WOnWidgetAdded     func(f func(w core.Widget)) *core.WidgetBase
	WParent            func() tree.Node
	WPath              func() string
	WPathFrom          func(parent tree.Node) string
	WPosition          func()
	WRender            func()
	WRenderWidget      func()
	WScenePos          func()
	WScrollChanged     func(d math32.Dims, sb *core.Slider)
	WScrollGeom        func(d math32.Dims) (pos math32.Vector2, sz math32.Vector2)
	WScrollValues      func(d math32.Dims) (maxSize float32, visSize float32, visPct float32)
	WSend              func(e events.Types, orig ...events.Event)
	WSetAbilities      func(on bool, able ...abilities.Abilities) *core.WidgetBase
	WSetFlag           func(on bool, f ...enums.BitFlag)
	WSetName           func(name string)
	WSetScrollParams   func(d math32.Dims, sb *core.Slider)
	WSetState          func(on bool, state ...states.States) *core.WidgetBase
	WShowContextMenu   func(e events.Event)
	WSizeDown          func(iter int) bool
	WSizeDownSetAllocs func(iter int)
	WSizeFinal         func()
	WSizeFromChildren  func(iter int, pass core.LayoutPasses) math32.Vector2
	WSizeUp            func()
	WStateIs           func(flag states.States) bool
	WStyle             func(s func(s *styles.Style)) *core.WidgetBase
	WThis              func() tree.Node
	WUpdate            func()
	WWalkDown          func(fun func(n tree.Node) bool)
	WWalkDownBreadth   func(fun func(n tree.Node) bool)
	WWalkDownPost      func(doChildTest func(n tree.Node) bool, fun func(n tree.Node) bool)
	WWalkUp            func(fun func(n tree.Node) bool) bool
	WWalkUpParent      func(fun func(n tree.Node) bool) bool
	WWidgetTooltip     func(pos image.Point) (string, image.Point)
}

func (W _cogentcore_org_core_core_Layouter) AbilityIs(flag abilities.Abilities) bool {
	return W.WAbilityIs(flag)
}
func (W _cogentcore_org_core_core_Layouter) AddContextMenu(menu func(m *core.Scene)) *core.WidgetBase {
	return W.WAddContextMenu(menu)
}
func (W _cogentcore_org_core_core_Layouter) ApplyContextMenus(m *core.Scene) {
	W.WApplyContextMenus(m)
}
func (W _cogentcore_org_core_core_Layouter) ApplyStyle() {
	W.WApplyStyle()
}
func (W _cogentcore_org_core_core_Layouter) AsFrame() *core.Frame {
	return W.WAsFrame()
}
func (W _cogentcore_org_core_core_Layouter) AsTree() *tree.NodeBase {
	return W.WAsTree()
}
func (W _cogentcore_org_core_core_Layouter) AsWidget() *core.WidgetBase {
	return W.WAsWidget()
}
func (W _cogentcore_org_core_core_Layouter) BaseType() *types.Type {
	return W.WBaseType()
}
func (W _cogentcore_org_core_core_Layouter) Child(i int) tree.Node {
	return W.WChild(i)
}
func (W _cogentcore_org_core_core_Layouter) ChildBackground(child core.Widget) image.Image {
	return W.WChildBackground(child)
}
func (W _cogentcore_org_core_core_Layouter) ChildByName(name string, startIndex ...int) tree.Node {
	return W.WChildByName(name, startIndex...)
}
func (W _cogentcore_org_core_core_Layouter) Clone() tree.Node {
	return W.WClone()
}
func (W _cogentcore_org_core_core_Layouter) ContextMenuPos(e events.Event) image.Point {
	return W.WContextMenuPos(e)
}
func (W _cogentcore_org_core_core_Layouter) CopyFieldsFrom(from tree.Node) {
	W.WCopyFieldsFrom(from)
}
func (W _cogentcore_org_core_core_Layouter) CopyFrom(src tree.Node) {
	W.WCopyFrom(src)
}
func (W _cogentcore_org_core_core_Layouter) Destroy() {
	W.WDestroy()
}
func (W _cogentcore_org_core_core_Layouter) DirectRenderDraw(drw system.Drawer, idx int, flipY bool) {
	W.WDirectRenderDraw(drw, idx, flipY)
}
func (W _cogentcore_org_core_core_Layouter) DirectRenderImage(drw system.Drawer, idx int) {
	W.WDirectRenderImage(drw, idx)
}
func (W _cogentcore_org_core_core_Layouter) FieldByName(field string) (tree.Node, error) {
	return W.WFieldByName(field)
}
func (W _cogentcore_org_core_core_Layouter) FindPath(path string) tree.Node {
	return W.WFindPath(path)
}
func (W _cogentcore_org_core_core_Layouter) FlagType() enums.BitFlagSetter {
	return W.WFlagType()
}
func (W _cogentcore_org_core_core_Layouter) HandleEvent(e events.Event) {
	W.WHandleEvent(e)
}
func (W _cogentcore_org_core_core_Layouter) HasChildren() bool {
	return W.WHasChildren()
}
func (W _cogentcore_org_core_core_Layouter) Init() {
	W.WInit()
}
func (W _cogentcore_org_core_core_Layouter) Is(f enums.BitFlag) bool {
	return W.WIs(f)
}
func (W _cogentcore_org_core_core_Layouter) IsVisible() bool {
	return W.WIsVisible()
}
func (W _cogentcore_org_core_core_Layouter) LayoutSpace() {
	W.WLayoutSpace()
}
func (W _cogentcore_org_core_core_Layouter) ManageOverflow(iter int, updateSize bool) bool {
	return W.WManageOverflow(iter, updateSize)
}
func (W _cogentcore_org_core_core_Layouter) Name() string {
	return W.WName()
}
func (W _cogentcore_org_core_core_Layouter) New() tree.Node {
	return W.WNew()
}
func (W _cogentcore_org_core_core_Layouter) NodeType() *types.Type {
	return W.WNodeType()
}
func (W _cogentcore_org_core_core_Layouter) NodeWalkDown(fun func(n tree.Node) bool) {
	W.WNodeWalkDown(fun)
}
func (W _cogentcore_org_core_core_Layouter) NumChildren() int {
	return W.WNumChildren()
}
func (W _cogentcore_org_core_core_Layouter) On(etype events.Types, fun func(e events.Event)) *core.WidgetBase {
	return W.WOn(etype, fun)
}
func (W _cogentcore_org_core_core_Layouter) OnAdd() {
	W.WOnAdd()
}
func (W _cogentcore_org_core_core_Layouter) OnChildAdded(child tree.Node) {
	W.WOnChildAdded(child)
}
func (W _cogentcore_org_core_core_Layouter) OnClick(fun func(e events.Event)) *core.WidgetBase {
	return W.WOnClick(fun)
}
func (W _cogentcore_org_core_core_Layouter) OnWidgetAdded(f func(w core.Widget)) *core.WidgetBase {
	return W.WOnWidgetAdded(f)
}
func (W _cogentcore_org_core_core_Layouter) Parent() tree.Node {
	return W.WParent()
}
func (W _cogentcore_org_core_core_Layouter) Path() string {
	return W.WPath()
}
func (W _cogentcore_org_core_core_Layouter) PathFrom(parent tree.Node) string {
	return W.WPathFrom(parent)
}
func (W _cogentcore_org_core_core_Layouter) Position() {
	W.WPosition()
}
func (W _cogentcore_org_core_core_Layouter) Render() {
	W.WRender()
}
func (W _cogentcore_org_core_core_Layouter) RenderWidget() {
	W.WRenderWidget()
}
func (W _cogentcore_org_core_core_Layouter) ScenePos() {
	W.WScenePos()
}
func (W _cogentcore_org_core_core_Layouter) ScrollChanged(d math32.Dims, sb *core.Slider) {
	W.WScrollChanged(d, sb)
}
func (W _cogentcore_org_core_core_Layouter) ScrollGeom(d math32.Dims) (pos math32.Vector2, sz math32.Vector2) {
	return W.WScrollGeom(d)
}
func (W _cogentcore_org_core_core_Layouter) ScrollValues(d math32.Dims) (maxSize float32, visSize float32, visPct float32) {
	return W.WScrollValues(d)
}
func (W _cogentcore_org_core_core_Layouter) Send(e events.Types, orig ...events.Event) {
	W.WSend(e, orig...)
}
func (W _cogentcore_org_core_core_Layouter) SetAbilities(on bool, able ...abilities.Abilities) *core.WidgetBase {
	return W.WSetAbilities(on, able...)
}
func (W _cogentcore_org_core_core_Layouter) SetFlag(on bool, f ...enums.BitFlag) {
	W.WSetFlag(on, f...)
}
func (W _cogentcore_org_core_core_Layouter) SetName(name string) {
	W.WSetName(name)
}
func (W _cogentcore_org_core_core_Layouter) SetScrollParams(d math32.Dims, sb *core.Slider) {
	W.WSetScrollParams(d, sb)
}
func (W _cogentcore_org_core_core_Layouter) SetState(on bool, state ...states.States) *core.WidgetBase {
	return W.WSetState(on, state...)
}
func (W _cogentcore_org_core_core_Layouter) ShowContextMenu(e events.Event) {
	W.WShowContextMenu(e)
}
func (W _cogentcore_org_core_core_Layouter) SizeDown(iter int) bool {
	return W.WSizeDown(iter)
}
func (W _cogentcore_org_core_core_Layouter) SizeDownSetAllocs(iter int) {
	W.WSizeDownSetAllocs(iter)
}
func (W _cogentcore_org_core_core_Layouter) SizeFinal() {
	W.WSizeFinal()
}
func (W _cogentcore_org_core_core_Layouter) SizeFromChildren(iter int, pass core.LayoutPasses) math32.Vector2 {
	return W.WSizeFromChildren(iter, pass)
}
func (W _cogentcore_org_core_core_Layouter) SizeUp() {
	W.WSizeUp()
}
func (W _cogentcore_org_core_core_Layouter) StateIs(flag states.States) bool {
	return W.WStateIs(flag)
}
func (W _cogentcore_org_core_core_Layouter) Style(s func(s *styles.Style)) *core.WidgetBase {
	return W.WStyle(s)
}
func (W _cogentcore_org_core_core_Layouter) This() tree.Node {
	return W.WThis()
}
func (W _cogentcore_org_core_core_Layouter) Update() {
	W.WUpdate()
}
func (W _cogentcore_org_core_core_Layouter) WalkDown(fun func(n tree.Node) bool) {
	W.WWalkDown(fun)
}
func (W _cogentcore_org_core_core_Layouter) WalkDownBreadth(fun func(n tree.Node) bool) {
	W.WWalkDownBreadth(fun)
}
func (W _cogentcore_org_core_core_Layouter) WalkDownPost(doChildTest func(n tree.Node) bool, fun func(n tree.Node) bool) {
	W.WWalkDownPost(doChildTest, fun)
}
func (W _cogentcore_org_core_core_Layouter) WalkUp(fun func(n tree.Node) bool) bool {
	return W.WWalkUp(fun)
}
func (W _cogentcore_org_core_core_Layouter) WalkUpParent(fun func(n tree.Node) bool) bool {
	return W.WWalkUpParent(fun)
}
func (W _cogentcore_org_core_core_Layouter) WidgetTooltip(pos image.Point) (string, image.Point) {
	return W.WWidgetTooltip(pos)
}

// _cogentcore_org_core_core_OnBinder is an interface wrapper for OnBinder type
type _cogentcore_org_core_core_OnBinder struct {
	IValue  interface{}
	WOnBind func(value any)
}

func (W _cogentcore_org_core_core_OnBinder) OnBind(value any) {
	W.WOnBind(value)
}

// _cogentcore_org_core_core_Settings is an interface wrapper for Settings type
type _cogentcore_org_core_core_Settings struct {
	IValue       interface{}
	WApply       func()
	WDefaults    func()
	WFilename    func() string
	WLabel       func() string
	WMakeToolbar func(p *core.Plan)
}

func (W _cogentcore_org_core_core_Settings) Apply() {
	W.WApply()
}
func (W _cogentcore_org_core_core_Settings) Defaults() {
	W.WDefaults()
}
func (W _cogentcore_org_core_core_Settings) Filename() string {
	return W.WFilename()
}
func (W _cogentcore_org_core_core_Settings) Label() string {
	return W.WLabel()
}
func (W _cogentcore_org_core_core_Settings) MakeToolbar(p *core.Plan) {
	W.WMakeToolbar(p)
}

// _cogentcore_org_core_core_SettingsOpener is an interface wrapper for SettingsOpener type
type _cogentcore_org_core_core_SettingsOpener struct {
	IValue       interface{}
	WApply       func()
	WDefaults    func()
	WFilename    func() string
	WLabel       func() string
	WMakeToolbar func(p *core.Plan)
	WOpen        func() error
}

func (W _cogentcore_org_core_core_SettingsOpener) Apply() {
	W.WApply()
}
func (W _cogentcore_org_core_core_SettingsOpener) Defaults() {
	W.WDefaults()
}
func (W _cogentcore_org_core_core_SettingsOpener) Filename() string {
	return W.WFilename()
}
func (W _cogentcore_org_core_core_SettingsOpener) Label() string {
	return W.WLabel()
}
func (W _cogentcore_org_core_core_SettingsOpener) MakeToolbar(p *core.Plan) {
	W.WMakeToolbar(p)
}
func (W _cogentcore_org_core_core_SettingsOpener) Open() error {
	return W.WOpen()
}

// _cogentcore_org_core_core_SettingsSaver is an interface wrapper for SettingsSaver type
type _cogentcore_org_core_core_SettingsSaver struct {
	IValue       interface{}
	WApply       func()
	WDefaults    func()
	WFilename    func() string
	WLabel       func() string
	WMakeToolbar func(p *core.Plan)
	WSave        func() error
}

func (W _cogentcore_org_core_core_SettingsSaver) Apply() {
	W.WApply()
}
func (W _cogentcore_org_core_core_SettingsSaver) Defaults() {
	W.WDefaults()
}
func (W _cogentcore_org_core_core_SettingsSaver) Filename() string {
	return W.WFilename()
}
func (W _cogentcore_org_core_core_SettingsSaver) Label() string {
	return W.WLabel()
}
func (W _cogentcore_org_core_core_SettingsSaver) MakeToolbar(p *core.Plan) {
	W.WMakeToolbar(p)
}
func (W _cogentcore_org_core_core_SettingsSaver) Save() error {
	return W.WSave()
}

// _cogentcore_org_core_core_ShouldShower is an interface wrapper for ShouldShower type
type _cogentcore_org_core_core_ShouldShower struct {
	IValue      interface{}
	WShouldShow func(field string) bool
}

func (W _cogentcore_org_core_core_ShouldShower) ShouldShow(field string) bool {
	return W.WShouldShow(field)
}

// _cogentcore_org_core_core_TextFieldEmbedder is an interface wrapper for TextFieldEmbedder type
type _cogentcore_org_core_core_TextFieldEmbedder struct {
	IValue       interface{}
	WAsTextField func() *core.TextField
}

func (W _cogentcore_org_core_core_TextFieldEmbedder) AsTextField() *core.TextField {
	return W.WAsTextField()
}

// _cogentcore_org_core_core_ToolbarMaker is an interface wrapper for ToolbarMaker type
type _cogentcore_org_core_core_ToolbarMaker struct {
	IValue       interface{}
	WMakeToolbar func(p *core.Plan)
}

func (W _cogentcore_org_core_core_ToolbarMaker) MakeToolbar(p *core.Plan) {
	W.WMakeToolbar(p)
}

// _cogentcore_org_core_core_Validator is an interface wrapper for Validator type
type _cogentcore_org_core_core_Validator struct {
	IValue    interface{}
	WValidate func() error
}

func (W _cogentcore_org_core_core_Validator) Validate() error {
	return W.WValidate()
}

// _cogentcore_org_core_core_Value is an interface wrapper for Value type
type _cogentcore_org_core_core_Value struct {
	IValue             interface{}
	WAbilityIs         func(flag abilities.Abilities) bool
	WAddContextMenu    func(menu func(m *core.Scene)) *core.WidgetBase
	WApplyContextMenus func(m *core.Scene)
	WApplyStyle        func()
	WAsTree            func() *tree.NodeBase
	WAsWidget          func() *core.WidgetBase
	WBaseType          func() *types.Type
	WChild             func(i int) tree.Node
	WChildBackground   func(child core.Widget) image.Image
	WChildByName       func(name string, startIndex ...int) tree.Node
	WClone             func() tree.Node
	WContextMenuPos    func(e events.Event) image.Point
	WCopyFieldsFrom    func(from tree.Node)
	WCopyFrom          func(src tree.Node)
	WDestroy           func()
	WDirectRenderDraw  func(drw system.Drawer, idx int, flipY bool)
	WDirectRenderImage func(drw system.Drawer, idx int)
	WFieldByName       func(field string) (tree.Node, error)
	WFindPath          func(path string) tree.Node
	WFlagType          func() enums.BitFlagSetter
	WHandleEvent       func(e events.Event)
	WHasChildren       func() bool
	WInit              func()
	WIs                func(f enums.BitFlag) bool
	WIsVisible         func() bool
	WName              func() string
	WNew               func() tree.Node
	WNodeType          func() *types.Type
	WNodeWalkDown      func(fun func(n tree.Node) bool)
	WNumChildren       func() int
	WOn                func(etype events.Types, fun func(e events.Event)) *core.WidgetBase
	WOnAdd             func()
	WOnChildAdded      func(child tree.Node)
	WOnClick           func(fun func(e events.Event)) *core.WidgetBase
	WOnWidgetAdded     func(f func(w core.Widget)) *core.WidgetBase
	WParent            func() tree.Node
	WPath              func() string
	WPathFrom          func(parent tree.Node) string
	WPosition          func()
	WRender            func()
	WRenderWidget      func()
	WScenePos          func()
	WSend              func(e events.Types, orig ...events.Event)
	WSetAbilities      func(on bool, able ...abilities.Abilities) *core.WidgetBase
	WSetFlag           func(on bool, f ...enums.BitFlag)
	WSetName           func(name string)
	WSetState          func(on bool, state ...states.States) *core.WidgetBase
	WShowContextMenu   func(e events.Event)
	WSizeDown          func(iter int) bool
	WSizeFinal         func()
	WSizeUp            func()
	WStateIs           func(flag states.States) bool
	WStyle             func(s func(s *styles.Style)) *core.WidgetBase
	WThis              func() tree.Node
	WUpdate            func()
	WWalkDown          func(fun func(n tree.Node) bool)
	WWalkDownBreadth   func(fun func(n tree.Node) bool)
	WWalkDownPost      func(doChildTest func(n tree.Node) bool, fun func(n tree.Node) bool)
	WWalkUp            func(fun func(n tree.Node) bool) bool
	WWalkUpParent      func(fun func(n tree.Node) bool) bool
	WWidgetTooltip     func(pos image.Point) (string, image.Point)
	WWidgetValue       func() any
}

func (W _cogentcore_org_core_core_Value) AbilityIs(flag abilities.Abilities) bool {
	return W.WAbilityIs(flag)
}
func (W _cogentcore_org_core_core_Value) AddContextMenu(menu func(m *core.Scene)) *core.WidgetBase {
	return W.WAddContextMenu(menu)
}
func (W _cogentcore_org_core_core_Value) ApplyContextMenus(m *core.Scene) {
	W.WApplyContextMenus(m)
}
func (W _cogentcore_org_core_core_Value) ApplyStyle() {
	W.WApplyStyle()
}
func (W _cogentcore_org_core_core_Value) AsTree() *tree.NodeBase {
	return W.WAsTree()
}
func (W _cogentcore_org_core_core_Value) AsWidget() *core.WidgetBase {
	return W.WAsWidget()
}
func (W _cogentcore_org_core_core_Value) BaseType() *types.Type {
	return W.WBaseType()
}
func (W _cogentcore_org_core_core_Value) Child(i int) tree.Node {
	return W.WChild(i)
}
func (W _cogentcore_org_core_core_Value) ChildBackground(child core.Widget) image.Image {
	return W.WChildBackground(child)
}
func (W _cogentcore_org_core_core_Value) ChildByName(name string, startIndex ...int) tree.Node {
	return W.WChildByName(name, startIndex...)
}
func (W _cogentcore_org_core_core_Value) Clone() tree.Node {
	return W.WClone()
}
func (W _cogentcore_org_core_core_Value) ContextMenuPos(e events.Event) image.Point {
	return W.WContextMenuPos(e)
}
func (W _cogentcore_org_core_core_Value) CopyFieldsFrom(from tree.Node) {
	W.WCopyFieldsFrom(from)
}
func (W _cogentcore_org_core_core_Value) CopyFrom(src tree.Node) {
	W.WCopyFrom(src)
}
func (W _cogentcore_org_core_core_Value) Destroy() {
	W.WDestroy()
}
func (W _cogentcore_org_core_core_Value) DirectRenderDraw(drw system.Drawer, idx int, flipY bool) {
	W.WDirectRenderDraw(drw, idx, flipY)
}
func (W _cogentcore_org_core_core_Value) DirectRenderImage(drw system.Drawer, idx int) {
	W.WDirectRenderImage(drw, idx)
}
func (W _cogentcore_org_core_core_Value) FieldByName(field string) (tree.Node, error) {
	return W.WFieldByName(field)
}
func (W _cogentcore_org_core_core_Value) FindPath(path string) tree.Node {
	return W.WFindPath(path)
}
func (W _cogentcore_org_core_core_Value) FlagType() enums.BitFlagSetter {
	return W.WFlagType()
}
func (W _cogentcore_org_core_core_Value) HandleEvent(e events.Event) {
	W.WHandleEvent(e)
}
func (W _cogentcore_org_core_core_Value) HasChildren() bool {
	return W.WHasChildren()
}
func (W _cogentcore_org_core_core_Value) Init() {
	W.WInit()
}
func (W _cogentcore_org_core_core_Value) Is(f enums.BitFlag) bool {
	return W.WIs(f)
}
func (W _cogentcore_org_core_core_Value) IsVisible() bool {
	return W.WIsVisible()
}
func (W _cogentcore_org_core_core_Value) Name() string {
	return W.WName()
}
func (W _cogentcore_org_core_core_Value) New() tree.Node {
	return W.WNew()
}
func (W _cogentcore_org_core_core_Value) NodeType() *types.Type {
	return W.WNodeType()
}
func (W _cogentcore_org_core_core_Value) NodeWalkDown(fun func(n tree.Node) bool) {
	W.WNodeWalkDown(fun)
}
func (W _cogentcore_org_core_core_Value) NumChildren() int {
	return W.WNumChildren()
}
func (W _cogentcore_org_core_core_Value) On(etype events.Types, fun func(e events.Event)) *core.WidgetBase {
	return W.WOn(etype, fun)
}
func (W _cogentcore_org_core_core_Value) OnAdd() {
	W.WOnAdd()
}
func (W _cogentcore_org_core_core_Value) OnChildAdded(child tree.Node) {
	W.WOnChildAdded(child)
}
func (W _cogentcore_org_core_core_Value) OnClick(fun func(e events.Event)) *core.WidgetBase {
	return W.WOnClick(fun)
}
func (W _cogentcore_org_core_core_Value) OnWidgetAdded(f func(w core.Widget)) *core.WidgetBase {
	return W.WOnWidgetAdded(f)
}
func (W _cogentcore_org_core_core_Value) Parent() tree.Node {
	return W.WParent()
}
func (W _cogentcore_org_core_core_Value) Path() string {
	return W.WPath()
}
func (W _cogentcore_org_core_core_Value) PathFrom(parent tree.Node) string {
	return W.WPathFrom(parent)
}
func (W _cogentcore_org_core_core_Value) Position() {
	W.WPosition()
}
func (W _cogentcore_org_core_core_Value) Render() {
	W.WRender()
}
func (W _cogentcore_org_core_core_Value) RenderWidget() {
	W.WRenderWidget()
}
func (W _cogentcore_org_core_core_Value) ScenePos() {
	W.WScenePos()
}
func (W _cogentcore_org_core_core_Value) Send(e events.Types, orig ...events.Event) {
	W.WSend(e, orig...)
}
func (W _cogentcore_org_core_core_Value) SetAbilities(on bool, able ...abilities.Abilities) *core.WidgetBase {
	return W.WSetAbilities(on, able...)
}
func (W _cogentcore_org_core_core_Value) SetFlag(on bool, f ...enums.BitFlag) {
	W.WSetFlag(on, f...)
}
func (W _cogentcore_org_core_core_Value) SetName(name string) {
	W.WSetName(name)
}
func (W _cogentcore_org_core_core_Value) SetState(on bool, state ...states.States) *core.WidgetBase {
	return W.WSetState(on, state...)
}
func (W _cogentcore_org_core_core_Value) ShowContextMenu(e events.Event) {
	W.WShowContextMenu(e)
}
func (W _cogentcore_org_core_core_Value) SizeDown(iter int) bool {
	return W.WSizeDown(iter)
}
func (W _cogentcore_org_core_core_Value) SizeFinal() {
	W.WSizeFinal()
}
func (W _cogentcore_org_core_core_Value) SizeUp() {
	W.WSizeUp()
}
func (W _cogentcore_org_core_core_Value) StateIs(flag states.States) bool {
	return W.WStateIs(flag)
}
func (W _cogentcore_org_core_core_Value) Style(s func(s *styles.Style)) *core.WidgetBase {
	return W.WStyle(s)
}
func (W _cogentcore_org_core_core_Value) This() tree.Node {
	return W.WThis()
}
func (W _cogentcore_org_core_core_Value) Update() {
	W.WUpdate()
}
func (W _cogentcore_org_core_core_Value) WalkDown(fun func(n tree.Node) bool) {
	W.WWalkDown(fun)
}
func (W _cogentcore_org_core_core_Value) WalkDownBreadth(fun func(n tree.Node) bool) {
	W.WWalkDownBreadth(fun)
}
func (W _cogentcore_org_core_core_Value) WalkDownPost(doChildTest func(n tree.Node) bool, fun func(n tree.Node) bool) {
	W.WWalkDownPost(doChildTest, fun)
}
func (W _cogentcore_org_core_core_Value) WalkUp(fun func(n tree.Node) bool) bool {
	return W.WWalkUp(fun)
}
func (W _cogentcore_org_core_core_Value) WalkUpParent(fun func(n tree.Node) bool) bool {
	return W.WWalkUpParent(fun)
}
func (W _cogentcore_org_core_core_Value) WidgetTooltip(pos image.Point) (string, image.Point) {
	return W.WWidgetTooltip(pos)
}
func (W _cogentcore_org_core_core_Value) WidgetValue() any {
	return W.WWidgetValue()
}

// _cogentcore_org_core_core_ValueSetter is an interface wrapper for ValueSetter type
type _cogentcore_org_core_core_ValueSetter struct {
	IValue          interface{}
	WSetWidgetValue func(value any) error
}

func (W _cogentcore_org_core_core_ValueSetter) SetWidgetValue(value any) error {
	return W.WSetWidgetValue(value)
}

// _cogentcore_org_core_core_Valuer is an interface wrapper for Valuer type
type _cogentcore_org_core_core_Valuer struct {
	IValue interface{}
	WValue func() core.Value
}

func (W _cogentcore_org_core_core_Valuer) Value() core.Value {
	return W.WValue()
}

// _cogentcore_org_core_core_Widget is an interface wrapper for Widget type
type _cogentcore_org_core_core_Widget struct {
	IValue             interface{}
	WAbilityIs         func(flag abilities.Abilities) bool
	WAddContextMenu    func(menu func(m *core.Scene)) *core.WidgetBase
	WApplyContextMenus func(m *core.Scene)
	WApplyStyle        func()
	WAsTree            func() *tree.NodeBase
	WAsWidget          func() *core.WidgetBase
	WBaseType          func() *types.Type
	WChild             func(i int) tree.Node
	WChildBackground   func(child core.Widget) image.Image
	WChildByName       func(name string, startIndex ...int) tree.Node
	WClone             func() tree.Node
	WContextMenuPos    func(e events.Event) image.Point
	WCopyFieldsFrom    func(from tree.Node)
	WCopyFrom          func(src tree.Node)
	WDestroy           func()
	WDirectRenderDraw  func(drw system.Drawer, idx int, flipY bool)
	WDirectRenderImage func(drw system.Drawer, idx int)
	WFieldByName       func(field string) (tree.Node, error)
	WFindPath          func(path string) tree.Node
	WFlagType          func() enums.BitFlagSetter
	WHandleEvent       func(e events.Event)
	WHasChildren       func() bool
	WInit              func()
	WIs                func(f enums.BitFlag) bool
	WIsVisible         func() bool
	WName              func() string
	WNew               func() tree.Node
	WNodeType          func() *types.Type
	WNodeWalkDown      func(fun func(n tree.Node) bool)
	WNumChildren       func() int
	WOn                func(etype events.Types, fun func(e events.Event)) *core.WidgetBase
	WOnAdd             func()
	WOnChildAdded      func(child tree.Node)
	WOnClick           func(fun func(e events.Event)) *core.WidgetBase
	WOnWidgetAdded     func(f func(w core.Widget)) *core.WidgetBase
	WParent            func() tree.Node
	WPath              func() string
	WPathFrom          func(parent tree.Node) string
	WPosition          func()
	WRender            func()
	WRenderWidget      func()
	WScenePos          func()
	WSend              func(e events.Types, orig ...events.Event)
	WSetAbilities      func(on bool, able ...abilities.Abilities) *core.WidgetBase
	WSetFlag           func(on bool, f ...enums.BitFlag)
	WSetName           func(name string)
	WSetState          func(on bool, state ...states.States) *core.WidgetBase
	WShowContextMenu   func(e events.Event)
	WSizeDown          func(iter int) bool
	WSizeFinal         func()
	WSizeUp            func()
	WStateIs           func(flag states.States) bool
	WStyle             func(s func(s *styles.Style)) *core.WidgetBase
	WThis              func() tree.Node
	WUpdate            func()
	WWalkDown          func(fun func(n tree.Node) bool)
	WWalkDownBreadth   func(fun func(n tree.Node) bool)
	WWalkDownPost      func(doChildTest func(n tree.Node) bool, fun func(n tree.Node) bool)
	WWalkUp            func(fun func(n tree.Node) bool) bool
	WWalkUpParent      func(fun func(n tree.Node) bool) bool
	WWidgetTooltip     func(pos image.Point) (string, image.Point)
}

func (W _cogentcore_org_core_core_Widget) AbilityIs(flag abilities.Abilities) bool {
	return W.WAbilityIs(flag)
}
func (W _cogentcore_org_core_core_Widget) AddContextMenu(menu func(m *core.Scene)) *core.WidgetBase {
	return W.WAddContextMenu(menu)
}
func (W _cogentcore_org_core_core_Widget) ApplyContextMenus(m *core.Scene) {
	W.WApplyContextMenus(m)
}
func (W _cogentcore_org_core_core_Widget) ApplyStyle() {
	W.WApplyStyle()
}
func (W _cogentcore_org_core_core_Widget) AsTree() *tree.NodeBase {
	return W.WAsTree()
}
func (W _cogentcore_org_core_core_Widget) AsWidget() *core.WidgetBase {
	return W.WAsWidget()
}
func (W _cogentcore_org_core_core_Widget) BaseType() *types.Type {
	return W.WBaseType()
}
func (W _cogentcore_org_core_core_Widget) Child(i int) tree.Node {
	return W.WChild(i)
}
func (W _cogentcore_org_core_core_Widget) ChildBackground(child core.Widget) image.Image {
	return W.WChildBackground(child)
}
func (W _cogentcore_org_core_core_Widget) ChildByName(name string, startIndex ...int) tree.Node {
	return W.WChildByName(name, startIndex...)
}
func (W _cogentcore_org_core_core_Widget) Clone() tree.Node {
	return W.WClone()
}
func (W _cogentcore_org_core_core_Widget) ContextMenuPos(e events.Event) image.Point {
	return W.WContextMenuPos(e)
}
func (W _cogentcore_org_core_core_Widget) CopyFieldsFrom(from tree.Node) {
	W.WCopyFieldsFrom(from)
}
func (W _cogentcore_org_core_core_Widget) CopyFrom(src tree.Node) {
	W.WCopyFrom(src)
}
func (W _cogentcore_org_core_core_Widget) Destroy() {
	W.WDestroy()
}
func (W _cogentcore_org_core_core_Widget) DirectRenderDraw(drw system.Drawer, idx int, flipY bool) {
	W.WDirectRenderDraw(drw, idx, flipY)
}
func (W _cogentcore_org_core_core_Widget) DirectRenderImage(drw system.Drawer, idx int) {
	W.WDirectRenderImage(drw, idx)
}
func (W _cogentcore_org_core_core_Widget) FieldByName(field string) (tree.Node, error) {
	return W.WFieldByName(field)
}
func (W _cogentcore_org_core_core_Widget) FindPath(path string) tree.Node {
	return W.WFindPath(path)
}
func (W _cogentcore_org_core_core_Widget) FlagType() enums.BitFlagSetter {
	return W.WFlagType()
}
func (W _cogentcore_org_core_core_Widget) HandleEvent(e events.Event) {
	W.WHandleEvent(e)
}
func (W _cogentcore_org_core_core_Widget) HasChildren() bool {
	return W.WHasChildren()
}
func (W _cogentcore_org_core_core_Widget) Init() {
	W.WInit()
}
func (W _cogentcore_org_core_core_Widget) Is(f enums.BitFlag) bool {
	return W.WIs(f)
}
func (W _cogentcore_org_core_core_Widget) IsVisible() bool {
	return W.WIsVisible()
}
func (W _cogentcore_org_core_core_Widget) Name() string {
	return W.WName()
}
func (W _cogentcore_org_core_core_Widget) New() tree.Node {
	return W.WNew()
}
func (W _cogentcore_org_core_core_Widget) NodeType() *types.Type {
	return W.WNodeType()
}
func (W _cogentcore_org_core_core_Widget) NodeWalkDown(fun func(n tree.Node) bool) {
	W.WNodeWalkDown(fun)
}
func (W _cogentcore_org_core_core_Widget) NumChildren() int {
	return W.WNumChildren()
}
func (W _cogentcore_org_core_core_Widget) On(etype events.Types, fun func(e events.Event)) *core.WidgetBase {
	return W.WOn(etype, fun)
}
func (W _cogentcore_org_core_core_Widget) OnAdd() {
	W.WOnAdd()
}
func (W _cogentcore_org_core_core_Widget) OnChildAdded(child tree.Node) {
	W.WOnChildAdded(child)
}
func (W _cogentcore_org_core_core_Widget) OnClick(fun func(e events.Event)) *core.WidgetBase {
	return W.WOnClick(fun)
}
func (W _cogentcore_org_core_core_Widget) OnWidgetAdded(f func(w core.Widget)) *core.WidgetBase {
	return W.WOnWidgetAdded(f)
}
func (W _cogentcore_org_core_core_Widget) Parent() tree.Node {
	return W.WParent()
}
func (W _cogentcore_org_core_core_Widget) Path() string {
	return W.WPath()
}
func (W _cogentcore_org_core_core_Widget) PathFrom(parent tree.Node) string {
	return W.WPathFrom(parent)
}
func (W _cogentcore_org_core_core_Widget) Position() {
	W.WPosition()
}
func (W _cogentcore_org_core_core_Widget) Render() {
	W.WRender()
}
func (W _cogentcore_org_core_core_Widget) RenderWidget() {
	W.WRenderWidget()
}
func (W _cogentcore_org_core_core_Widget) ScenePos() {
	W.WScenePos()
}
func (W _cogentcore_org_core_core_Widget) Send(e events.Types, orig ...events.Event) {
	W.WSend(e, orig...)
}
func (W _cogentcore_org_core_core_Widget) SetAbilities(on bool, able ...abilities.Abilities) *core.WidgetBase {
	return W.WSetAbilities(on, able...)
}
func (W _cogentcore_org_core_core_Widget) SetFlag(on bool, f ...enums.BitFlag) {
	W.WSetFlag(on, f...)
}
func (W _cogentcore_org_core_core_Widget) SetName(name string) {
	W.WSetName(name)
}
func (W _cogentcore_org_core_core_Widget) SetState(on bool, state ...states.States) *core.WidgetBase {
	return W.WSetState(on, state...)
}
func (W _cogentcore_org_core_core_Widget) ShowContextMenu(e events.Event) {
	W.WShowContextMenu(e)
}
func (W _cogentcore_org_core_core_Widget) SizeDown(iter int) bool {
	return W.WSizeDown(iter)
}
func (W _cogentcore_org_core_core_Widget) SizeFinal() {
	W.WSizeFinal()
}
func (W _cogentcore_org_core_core_Widget) SizeUp() {
	W.WSizeUp()
}
func (W _cogentcore_org_core_core_Widget) StateIs(flag states.States) bool {
	return W.WStateIs(flag)
}
func (W _cogentcore_org_core_core_Widget) Style(s func(s *styles.Style)) *core.WidgetBase {
	return W.WStyle(s)
}
func (W _cogentcore_org_core_core_Widget) This() tree.Node {
	return W.WThis()
}
func (W _cogentcore_org_core_core_Widget) Update() {
	W.WUpdate()
}
func (W _cogentcore_org_core_core_Widget) WalkDown(fun func(n tree.Node) bool) {
	W.WWalkDown(fun)
}
func (W _cogentcore_org_core_core_Widget) WalkDownBreadth(fun func(n tree.Node) bool) {
	W.WWalkDownBreadth(fun)
}
func (W _cogentcore_org_core_core_Widget) WalkDownPost(doChildTest func(n tree.Node) bool, fun func(n tree.Node) bool) {
	W.WWalkDownPost(doChildTest, fun)
}
func (W _cogentcore_org_core_core_Widget) WalkUp(fun func(n tree.Node) bool) bool {
	return W.WWalkUp(fun)
}
func (W _cogentcore_org_core_core_Widget) WalkUpParent(fun func(n tree.Node) bool) bool {
	return W.WWalkUpParent(fun)
}
func (W _cogentcore_org_core_core_Widget) WidgetTooltip(pos image.Point) (string, image.Point) {
	return W.WWidgetTooltip(pos)
}
