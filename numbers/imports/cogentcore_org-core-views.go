// Code generated by 'yaegi extract cogentcore.org/core/views'. DO NOT EDIT.

package imports

import (
	"cogentcore.org/core/base/fileinfo/mimedata"
	"cogentcore.org/core/core"
	"cogentcore.org/core/events"
	"cogentcore.org/core/styles"
	"cogentcore.org/core/system"
	"cogentcore.org/core/tree"
	"cogentcore.org/core/types"
	"cogentcore.org/core/views"
	"go/constant"
	"go/token"
	"image"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/views/views"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AsTree":              reflect.ValueOf(views.AsTree),
		"CallFunc":                reflect.ValueOf(views.CallFunc),
		"ColorButtonType":         reflect.ValueOf(&views.ColorButtonType).Elem(),
		"ColorMapButtonType":      reflect.ValueOf(&views.ColorMapButtonType).Elem(),
		"ColorPickerType":           reflect.ValueOf(&views.ColorPickerType).Elem(),
		"ConfigImageToolbar":      reflect.ValueOf(views.ConfigImageToolbar),
		"ConfigSVGToolbar":        reflect.ValueOf(views.ConfigSVGToolbar),
		"DatePickerType":          reflect.ValueOf(&views.DatePickerType).Elem(),
		"DurationInputType":       reflect.ValueOf(&views.DurationInputType).Elem(),
		"FileButtonType":          reflect.ValueOf(&views.FileButtonType).Elem(),
		"FilePickerDialog":          reflect.ValueOf(views.FilePickerDialog),
		"FilePickerDirOnlyFilter":   reflect.ValueOf(views.FilePickerDirOnlyFilter),
		"FilePickerExtOnlyFilter":   reflect.ValueOf(views.FilePickerExtOnlyFilter),
		"FilePickerKindColorMap":    reflect.ValueOf(&views.FilePickerKindColorMap).Elem(),
		"FilePickerType":            reflect.ValueOf(&views.FilePickerType).Elem(),
		"FontButtonType":          reflect.ValueOf(&views.FontButtonType).Elem(),
		"FuncArgsToStruct":        reflect.ValueOf(views.FuncArgsToStruct),
		"FuncButtonType":          reflect.ValueOf(&views.FuncButtonType).Elem(),
		"IconButtonType":          reflect.ValueOf(&views.IconButtonType).Elem(),
		"InspectorType":           reflect.ValueOf(&views.InspectorType).Elem(),
		"InspectorView":           reflect.ValueOf(views.InspectorView),
		"InspectorWindow":         reflect.ValueOf(views.InspectorWindow),
		"KeyChordButtonType":      reflect.ValueOf(&views.KeyChordButtonType).Elem(),
		"KeyMapButtonType":        reflect.ValueOf(&views.KeyMapButtonType).Elem(),
		"KeyedListType":             reflect.ValueOf(&views.KeyedListType).Elem(),
		"NewColorButton":          reflect.ValueOf(views.NewColorButton),
		"NewColorMapButton":       reflect.ValueOf(views.NewColorMapButton),
		"NewColorPicker":            reflect.ValueOf(views.NewColorPicker),
		"NewDatePicker":           reflect.ValueOf(views.NewDatePicker),
		"NewDurationInput":        reflect.ValueOf(views.NewDurationInput),
		"NewFileButton":           reflect.ValueOf(views.NewFileButton),
		"NewFilePicker":             reflect.ValueOf(views.NewFilePicker),
		"NewFontButton":           reflect.ValueOf(views.NewFontButton),
		"NewFuncButton":           reflect.ValueOf(views.NewFuncButton),
		"NewIconButton":           reflect.ValueOf(views.NewIconButton),
		"NewInspector":            reflect.ValueOf(views.NewInspector),
		"NewKeyChordButton":       reflect.ValueOf(views.NewKeyChordButton),
		"NewKeyMapButton":         reflect.ValueOf(views.NewKeyMapButton),
		"NewKeyedList":              reflect.ValueOf(views.NewKeyedList),
		"NewListButton":          reflect.ValueOf(views.NewListButton),
		"NewList":            reflect.ValueOf(views.NewList),
		"NewListBase":        reflect.ValueOf(views.NewListBase),
		"NewListGrid":        reflect.ValueOf(views.NewListGrid),
		"NewInlineList":      reflect.ValueOf(views.NewInlineList),
		"NewSoloFuncButton":       reflect.ValueOf(views.NewSoloFuncButton),
		"NewFormButton":         reflect.ValueOf(views.NewFormButton),
		"NewForm":           reflect.ValueOf(views.NewForm),
		"NewTable":            reflect.ValueOf(views.NewTable),
		"NewTimeInput":            reflect.ValueOf(views.NewTimeInput),
		"NewTimePicker":           reflect.ValueOf(views.NewTimePicker),
		"NewTreeButton":           reflect.ValueOf(views.NewTreeButton),
		"NewTree":             reflect.ValueOf(views.NewTree),
		"NewTreeFrame":        reflect.ValueOf(views.NewTreeFrame),
		"NewTypeChooser":          reflect.ValueOf(views.NewTypeChooser),
		"NoSentenceCaseFor":       reflect.ValueOf(&views.NoSentenceCaseFor).Elem(),
		"NoSentenceCaseForType":   reflect.ValueOf(views.NoSentenceCaseForType),
		"SettingsEditor":            reflect.ValueOf(views.SettingsEditor),
		"SettingsEditorToolbarBase": reflect.ValueOf(views.SettingsEditorToolbarBase),
		"SettingsWindow":          reflect.ValueOf(views.SettingsWindow),
		"ListButtonType":         reflect.ValueOf(&views.ListButtonType).Elem(),
		"SliceIndexByValue":       reflect.ValueOf(views.SliceIndexByValue),
		"ListBaseType":       reflect.ValueOf(&views.ListBaseType).Elem(),
		"ListColProperty":    reflect.ValueOf(constant.MakeFromLiteral("\"sv-col\"", token.STRING, 0)),
		"ListGridType":       reflect.ValueOf(&views.ListGridType).Elem(),
		"InlineListType":     reflect.ValueOf(&views.InlineListType).Elem(),
		"ListRowProperty":    reflect.ValueOf(constant.MakeFromLiteral("\"sv-row\"", token.STRING, 0)),
		"ListType":           reflect.ValueOf(&views.ListType).Elem(),
		"FormButtonType":        reflect.ValueOf(&views.FormButtonType).Elem(),
		"StructSliceIndexByValue": reflect.ValueOf(views.StructSliceIndexByValue),
		"FormType":          reflect.ValueOf(&views.FormType).Elem(),
		"TableType":           reflect.ValueOf(&views.TableType).Elem(),
		"TimeInputType":           reflect.ValueOf(&views.TimeInputType).Elem(),
		"TimePickerType":          reflect.ValueOf(&views.TimePickerType).Elem(),
		"TreeButtonType":          reflect.ValueOf(&views.TreeButtonType).Elem(),
		"TreePageSteps":       reflect.ValueOf(&views.TreePageSteps).Elem(),
		"TreeTempMovedTag":    reflect.ValueOf(constant.MakeFromLiteral("\"_\\\\&MOVED\\\\&\"", token.STRING, 0)),
		"TreeType":            reflect.ValueOf(&views.TreeType).Elem(),
		"TypeChooserType":         reflect.ValueOf(&views.TypeChooserType).Elem(),

		// type definitions
		"ColorButton":        reflect.ValueOf((*views.ColorButton)(nil)),
		"ColorMapButton":     reflect.ValueOf((*views.ColorMapButton)(nil)),
		"ColorMapName":       reflect.ValueOf((*views.ColorMapName)(nil)),
		"ColorPicker":          reflect.ValueOf((*views.ColorPicker)(nil)),
		"DatePicker":         reflect.ValueOf((*views.DatePicker)(nil)),
		"DurationInput":      reflect.ValueOf((*views.DurationInput)(nil)),
		"FileButton":         reflect.ValueOf((*views.FileButton)(nil)),
		"FilePicker":           reflect.ValueOf((*views.FilePicker)(nil)),
		"FilePickerFilterFunc": reflect.ValueOf((*views.FilePickerFilterFunc)(nil)),
		"FontButton":         reflect.ValueOf((*views.FontButton)(nil)),
		"FuncArg":            reflect.ValueOf((*views.FuncArg)(nil)),
		"FuncButton":         reflect.ValueOf((*views.FuncButton)(nil)),
		"IconButton":         reflect.ValueOf((*views.IconButton)(nil)),
		"Inspector":          reflect.ValueOf((*views.Inspector)(nil)),
		"KeyChordButton":     reflect.ValueOf((*views.KeyChordButton)(nil)),
		"KeyMapButton":       reflect.ValueOf((*views.KeyMapButton)(nil)),
		"MapButton":          reflect.ValueOf((*views.KeyedListButton)(nil)),
		"KeyedList":            reflect.ValueOf((*views.KeyedList)(nil)),
		"ListButton":        reflect.ValueOf((*views.ListButton)(nil)),
		"List":          reflect.ValueOf((*views.List)(nil)),
		"ListBase":      reflect.ValueOf((*views.ListBase)(nil)),
		"ListGrid":      reflect.ValueOf((*views.ListGrid)(nil)),
		"InlineList":    reflect.ValueOf((*views.InlineList)(nil)),
		"ListStyleFunc": reflect.ValueOf((*views.ListStyleFunc)(nil)),
		"Lister":        reflect.ValueOf((*views.Lister)(nil)),
		"FormButton":       reflect.ValueOf((*views.FormButton)(nil)),
		"Form":         reflect.ValueOf((*views.Form)(nil)),
		"Table":          reflect.ValueOf((*views.Table)(nil)),
		"TableStyleFunc": reflect.ValueOf((*views.TableStyleFunc)(nil)),
		"TimeInput":          reflect.ValueOf((*views.TimeInput)(nil)),
		"TimePicker":         reflect.ValueOf((*views.TimePicker)(nil)),
		"TreeButton":         reflect.ValueOf((*views.TreeButton)(nil)),
		"Tree":           reflect.ValueOf((*views.Tree)(nil)),
		"Treer":         reflect.ValueOf((*views.Treer)(nil)),
		"TypeChooser":        reflect.ValueOf((*views.TypeChooser)(nil)),

		// interface wrapper definitions
		"_Lister": reflect.ValueOf((*_cogentcore_org_core_views_Lister)(nil)),
		"_Treer":  reflect.ValueOf((*_cogentcore_org_core_views_Treer)(nil)),
	}
}

// _cogentcore_org_core_views_Lister is an interface wrapper for Lister type
type _cogentcore_org_core_views_Lister struct {
	IValue            interface{}
	WAsListBase  func() *views.ListBase
	WCopySelectToMime func() mimedata.Mimes
	WDragDrop         func(e events.Event)
	WDragStart        func(e events.Event)
	WDropDeleteSource func(e events.Event)
	WDropFinalize     func(de *events.DragDrop)
	WHasStyleFunc     func() bool
	WMakePasteMenu    func(m *core.Scene, md mimedata.Mimes, idx int, mod events.DropMods, fun func())
	WMakeRow          func(p *core.Plan, i int)
	WMimeDataType     func() string
	WPasteAssign      func(md mimedata.Mimes, idx int)
	WPasteAtIndex     func(md mimedata.Mimes, idx int)
	WRowFirstWidget   func(row int) (*core.WidgetBase, bool)
	WRowGrabFocus     func(row int) *core.WidgetBase
	WRowWidgetNs      func() (nWidgPerRow int, idxOff int)
	WSliceDeleteAt    func(idx int)
	WSliceGrid        func() *views.ListGrid
	WSliceIndex       func(i int) (si int, vi int, invis bool)
	WSliceNewAt       func(idx int)
	WStyleRow         func(w core.Widget, idx int, fidx int)
	WStyleValue       func(w core.Widget, s *styles.Style, row int, col int)
	WUpdateMaxWidths  func()
	WUpdateSliceSize  func() int
}

func (W _cogentcore_org_core_views_Lister) AsListBase() *views.ListBase {
	return W.WAsListBase()
}
func (W _cogentcore_org_core_views_Lister) CopySelectToMime() mimedata.Mimes {
	return W.WCopySelectToMime()
}
func (W _cogentcore_org_core_views_Lister) DragDrop(e events.Event) {
	W.WDragDrop(e)
}
func (W _cogentcore_org_core_views_Lister) DragStart(e events.Event) {
	W.WDragStart(e)
}
func (W _cogentcore_org_core_views_Lister) DropDeleteSource(e events.Event) {
	W.WDropDeleteSource(e)
}
func (W _cogentcore_org_core_views_Lister) DropFinalize(de *events.DragDrop) {
	W.WDropFinalize(de)
}
func (W _cogentcore_org_core_views_Lister) HasStyleFunc() bool {
	return W.WHasStyleFunc()
}
func (W _cogentcore_org_core_views_Lister) MakePasteMenu(m *core.Scene, md mimedata.Mimes, idx int, mod events.DropMods, fun func()) {
	W.WMakePasteMenu(m, md, idx, mod, fun)
}
func (W _cogentcore_org_core_views_Lister) MakeRow(p *core.Plan, i int) {
	W.WMakeRow(p, i)
}
func (W _cogentcore_org_core_views_Lister) MimeDataType() string {
	return W.WMimeDataType()
}
func (W _cogentcore_org_core_views_Lister) PasteAssign(md mimedata.Mimes, idx int) {
	W.WPasteAssign(md, idx)
}
func (W _cogentcore_org_core_views_Lister) PasteAtIndex(md mimedata.Mimes, idx int) {
	W.WPasteAtIndex(md, idx)
}
func (W _cogentcore_org_core_views_Lister) RowFirstWidget(row int) (*core.WidgetBase, bool) {
	return W.WRowFirstWidget(row)
}
func (W _cogentcore_org_core_views_Lister) RowGrabFocus(row int) *core.WidgetBase {
	return W.WRowGrabFocus(row)
}
func (W _cogentcore_org_core_views_Lister) RowWidgetNs() (nWidgPerRow int, idxOff int) {
	return W.WRowWidgetNs()
}
func (W _cogentcore_org_core_views_Lister) SliceDeleteAt(idx int) {
	W.WSliceDeleteAt(idx)
}
func (W _cogentcore_org_core_views_Lister) SliceGrid() *views.ListGrid {
	return W.WSliceGrid()
}
func (W _cogentcore_org_core_views_Lister) SliceIndex(i int) (si int, vi int, invis bool) {
	return W.WSliceIndex(i)
}
func (W _cogentcore_org_core_views_Lister) SliceNewAt(idx int) {
	W.WSliceNewAt(idx)
}
func (W _cogentcore_org_core_views_Lister) StyleRow(w core.Widget, idx int, fidx int) {
	W.WStyleRow(w, idx, fidx)
}
func (W _cogentcore_org_core_views_Lister) StyleValue(w core.Widget, s *styles.Style, row int, col int) {
	W.WStyleValue(w, s, row, col)
}
func (W _cogentcore_org_core_views_Lister) UpdateMaxWidths() {
	W.WUpdateMaxWidths()
}
func (W _cogentcore_org_core_views_Lister) UpdateSliceSize() int {
	return W.WUpdateSliceSize()
}

// _cogentcore_org_core_views_Treer is an interface wrapper for Treer type
type _cogentcore_org_core_views_Treer struct {
	IValue             interface{}
	WAddChildNode      func()
	WAsWidget          func() *core.WidgetBase
	WBaseType          func() *types.Type
	WCanOpen           func() bool
	WChildBackground   func(child core.Widget) image.Image
	WContextMenuPos    func(e events.Event) image.Point
	WCopy              func(reset bool)
	WCopyFieldsFrom    func(from tree.Node)
	WCut               func()
	WDeleteNode        func()
	WDestroy           func()
	WDirectRenderDraw  func(drw system.Drawer, idx int, flipY bool)
	WDirectRenderImage func(drw system.Drawer, idx int)
	WDragDrop          func(e events.Event)
	WDragStart         func(e events.Event)
	WDropDeleteSource  func(e events.Event)
	WDropFinalize      func(de *events.DragDrop)
	WDuplicate         func()
	WInit              func()
	WInsertAfter       func()
	WInsertBefore      func()
	WIsVisible         func() bool
	WMakePasteMenu     func(m *core.Scene, md mimedata.Mimes, fun func())
	WMimeData          func(md *mimedata.Mimes)
	WNew               func() tree.Node
	WNodeType          func() *types.Type
	WNodeWalkDown      func(fun func(n tree.Node) bool)
	WOnAdd             func()
	WOnChildAdded      func(child tree.Node)
	WOnClose           func()
	WOnDoubleClick     func(e events.Event)
	WOnOpen            func()
	WPaste             func()
	WPlanName          func() string
	WPosition          func()
	WRender            func()
	WRenderWidget      func()
	WScenePos          func()
	WShowContextMenu   func(e events.Event)
	WSizeDown          func(iter int) bool
	WSizeFinal         func()
	WSizeUp            func()
	WStyle             func()
	WUpdateBranchIcons func()
	WWidgetTooltip     func(pos image.Point) (string, image.Point)
}

func (W _cogentcore_org_core_views_Treer) AddChildNode() {
	W.WAddChildNode()
}

func (W _cogentcore_org_core_views_Treer) AsWidget() *core.WidgetBase {
	return W.WAsWidget()
}
func (W _cogentcore_org_core_views_Treer) BaseType() *types.Type {
	return W.WBaseType()
}
func (W _cogentcore_org_core_views_Treer) CanOpen() bool {
	return W.WCanOpen()
}
func (W _cogentcore_org_core_views_Treer) ChildBackground(child core.Widget) image.Image {
	return W.WChildBackground(child)
}
func (W _cogentcore_org_core_views_Treer) ContextMenuPos(e events.Event) image.Point {
	return W.WContextMenuPos(e)
}
func (W _cogentcore_org_core_views_Treer) Copy(reset bool) {
	W.WCopy(reset)
}
func (W _cogentcore_org_core_views_Treer) CopyFieldsFrom(from tree.Node) {
	W.WCopyFieldsFrom(from)
}
func (W _cogentcore_org_core_views_Treer) Cut() {
	W.WCut()
}
func (W _cogentcore_org_core_views_Treer) DeleteNode() {
	W.WDeleteNode()
}
func (W _cogentcore_org_core_views_Treer) Destroy() {
	W.WDestroy()
}
func (W _cogentcore_org_core_views_Treer) DirectRenderDraw(drw system.Drawer, idx int, flipY bool) {
	W.WDirectRenderDraw(drw, idx, flipY)
}
func (W _cogentcore_org_core_views_Treer) DirectRenderImage(drw system.Drawer, idx int) {
	W.WDirectRenderImage(drw, idx)
}
func (W _cogentcore_org_core_views_Treer) DragDrop(e events.Event) {
	W.WDragDrop(e)
}
func (W _cogentcore_org_core_views_Treer) DragStart(e events.Event) {
	W.WDragStart(e)
}
func (W _cogentcore_org_core_views_Treer) DropDeleteSource(e events.Event) {
	W.WDropDeleteSource(e)
}
func (W _cogentcore_org_core_views_Treer) DropFinalize(de *events.DragDrop) {
	W.WDropFinalize(de)
}
func (W _cogentcore_org_core_views_Treer) Duplicate() {
	W.WDuplicate()
}
func (W _cogentcore_org_core_views_Treer) Init() {
	W.WInit()
}
func (W _cogentcore_org_core_views_Treer) InsertAfter() {
	W.WInsertAfter()
}
func (W _cogentcore_org_core_views_Treer) InsertBefore() {
	W.WInsertBefore()
}
func (W _cogentcore_org_core_views_Treer) IsVisible() bool {
	return W.WIsVisible()
}
func (W _cogentcore_org_core_views_Treer) MakePasteMenu(m *core.Scene, md mimedata.Mimes, fun func()) {
	W.WMakePasteMenu(m, md, fun)
}
func (W _cogentcore_org_core_views_Treer) MimeData(md *mimedata.Mimes) {
	W.WMimeData(md)
}
func (W _cogentcore_org_core_views_Treer) New() tree.Node {
	return W.WNew()
}
func (W _cogentcore_org_core_views_Treer) NodeType() *types.Type {
	return W.WNodeType()
}
func (W _cogentcore_org_core_views_Treer) NodeWalkDown(fun func(n tree.Node) bool) {
	W.WNodeWalkDown(fun)
}
func (W _cogentcore_org_core_views_Treer) OnAdd() {
	W.WOnAdd()
}
func (W _cogentcore_org_core_views_Treer) OnChildAdded(child tree.Node) {
	W.WOnChildAdded(child)
}
func (W _cogentcore_org_core_views_Treer) OnClose() {
	W.WOnClose()
}
func (W _cogentcore_org_core_views_Treer) OnDoubleClick(e events.Event) {
	W.WOnDoubleClick(e)
}
func (W _cogentcore_org_core_views_Treer) OnOpen() {
	W.WOnOpen()
}
func (W _cogentcore_org_core_views_Treer) Paste() {
	W.WPaste()
}
func (W _cogentcore_org_core_views_Treer) PlanName() string {
	return W.WPlanName()
}
func (W _cogentcore_org_core_views_Treer) Position() {
	W.WPosition()
}
func (W _cogentcore_org_core_views_Treer) Render() {
	W.WRender()
}
func (W _cogentcore_org_core_views_Treer) RenderWidget() {
	W.WRenderWidget()
}
func (W _cogentcore_org_core_views_Treer) ScenePos() {
	W.WScenePos()
}
func (W _cogentcore_org_core_views_Treer) ShowContextMenu(e events.Event) {
	W.WShowContextMenu(e)
}
func (W _cogentcore_org_core_views_Treer) SizeDown(iter int) bool {
	return W.WSizeDown(iter)
}
func (W _cogentcore_org_core_views_Treer) SizeFinal() {
	W.WSizeFinal()
}
func (W _cogentcore_org_core_views_Treer) SizeUp() {
	W.WSizeUp()
}
func (W _cogentcore_org_core_views_Treer) Style() {
	W.WStyle()
}
func (W _cogentcore_org_core_views_Treer) UpdateBranchIcons() {
	W.WUpdateBranchIcons()
}
func (W _cogentcore_org_core_views_Treer) WidgetTooltip(pos image.Point) (string, image.Point) {
	return W.WWidgetTooltip(pos)
}
