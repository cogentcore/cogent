// Code generated by 'yaegi extract cogentcore.org/core/tensor/tensorcore'. DO NOT EDIT.

package imports

import (
	"cogentcore.org/core/tensor/tensorcore"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/tensorcore/tensorcore"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"LabelSpace":       reflect.ValueOf(tensorcore.LabelSpace),
		"NewSimMatButton":  reflect.ValueOf(tensorcore.NewSimMatButton),
		"NewSimMatGrid":    reflect.ValueOf(tensorcore.NewSimMatGrid),
		"NewTable":         reflect.ValueOf(tensorcore.NewTable),
		"NewTableButton":   reflect.ValueOf(tensorcore.NewTableButton),
		"NewTensorButton":  reflect.ValueOf(tensorcore.NewTensorButton),
		"NewTensorGrid":    reflect.ValueOf(tensorcore.NewTensorGrid),
		"SimMatButtonType": reflect.ValueOf(&tensorcore.SimMatButtonType).Elem(),
		"SimMatGridType":   reflect.ValueOf(&tensorcore.SimMatGridType).Elem(),
		"TableButtonType":  reflect.ValueOf(&tensorcore.TableButtonType).Elem(),
		"TableType":        reflect.ValueOf(&tensorcore.TableType).Elem(),
		"TensorButtonType": reflect.ValueOf(&tensorcore.TensorButtonType).Elem(),
		"TensorGridType":   reflect.ValueOf(&tensorcore.TensorGridType).Elem(),

		// type definitions
		"SimMatButton":  reflect.ValueOf((*tensorcore.SimMatButton)(nil)),
		"SimMatGrid":    reflect.ValueOf((*tensorcore.SimMatGrid)(nil)),
		"Table":         reflect.ValueOf((*tensorcore.Table)(nil)),
		"TableButton":   reflect.ValueOf((*tensorcore.TableButton)(nil)),
		"TensorButton":  reflect.ValueOf((*tensorcore.TensorButton)(nil)),
		"TensorDisplay": reflect.ValueOf((*tensorcore.TensorDisplay)(nil)),
		"TensorGrid":    reflect.ValueOf((*tensorcore.TensorGrid)(nil)),
		"TensorLayout":  reflect.ValueOf((*tensorcore.TensorLayout)(nil)),
	}
}
