// Code generated by 'yaegi extract cogentcore.org/core/plot/plotview'. DO NOT EDIT.

package imports

import (
	"cogentcore.org/core/plot/plotview"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/plot/plotview/plotview"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Bar":                reflect.ValueOf(plotview.Bar),
		"FixMax":             reflect.ValueOf(plotview.FixMax),
		"FixMin":             reflect.ValueOf(plotview.FixMin),
		"FloatMax":           reflect.ValueOf(plotview.FloatMax),
		"FloatMin":           reflect.ValueOf(plotview.FloatMin),
		"MetaMapLower":       reflect.ValueOf(plotview.MetaMapLower),
		"NewPlot":            reflect.ValueOf(plotview.NewPlot),
		"NewPlotView":        reflect.ValueOf(plotview.NewPlotView),
		"NewSubPlot":         reflect.ValueOf(plotview.NewSubPlot),
		"NewTableXY":         reflect.ValueOf(plotview.NewTableXY),
		"NewTableXYName":     reflect.ValueOf(plotview.NewTableXYName),
		"Off":                reflect.ValueOf(plotview.Off),
		"On":                 reflect.ValueOf(plotview.On),
		"PlotColumnsHeaderN": reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"PlotType":           reflect.ValueOf(&plotview.PlotType).Elem(),
		"PlotTypesN":         reflect.ValueOf(plotview.PlotTypesN),
		"PlotTypesValues":    reflect.ValueOf(plotview.PlotTypesValues),
		"PlotViewType":       reflect.ValueOf(&plotview.PlotViewType).Elem(),
		"XY":                 reflect.ValueOf(plotview.XY),

		// type definitions
		"ColumnParams": reflect.ValueOf((*plotview.ColumnParams)(nil)),
		"Plot":         reflect.ValueOf((*plotview.Plot)(nil)),
		"PlotParams":   reflect.ValueOf((*plotview.PlotParams)(nil)),
		"PlotTypes":    reflect.ValueOf((*plotview.PlotTypes)(nil)),
		"PlotView":     reflect.ValueOf((*plotview.PlotView)(nil)),
		"TableXY":      reflect.ValueOf((*plotview.TableXY)(nil)),
	}
}
