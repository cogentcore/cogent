// Code generated by 'yaegi extract cogentcore.org/core/tensor'. DO NOT EDIT.

package imports

import (
	"cogentcore.org/core/tensor"
	"gonum.org/v1/gonum/mat"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/tensor"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AddShapes":             reflect.ValueOf(tensor.AddShapes),
		"BoolToFloat64":         reflect.ValueOf(tensor.BoolToFloat64),
		"ColMajorStrides":       reflect.ValueOf(tensor.ColMajorStrides),
		"CopyDense":             reflect.ValueOf(tensor.CopyDense),
		"EqualInts":             reflect.ValueOf(tensor.EqualInts),
		"Float64ToBool":         reflect.ValueOf(tensor.Float64ToBool),
		"Float64ToString":       reflect.ValueOf(tensor.Float64ToString),
		"NewBits":               reflect.ValueOf(tensor.NewBits),
		"NewBitsShape":          reflect.ValueOf(tensor.NewBitsShape),
		"NewByte":               reflect.ValueOf(tensor.NewByte),
		"NewFloat32":            reflect.ValueOf(tensor.NewFloat32),
		"NewFloat64":            reflect.ValueOf(tensor.NewFloat64),
		"NewInt":                reflect.ValueOf(tensor.NewInt),
		"NewInt32":              reflect.ValueOf(tensor.NewInt32),
		"NewOfType":             reflect.ValueOf(tensor.NewOfType),
		"NewShape":              reflect.ValueOf(tensor.NewShape),
		"NewString":             reflect.ValueOf(tensor.NewString),
		"NewStringShape":        reflect.ValueOf(tensor.NewStringShape),
		"OddColumn":             reflect.ValueOf(tensor.OddColumn),
		"OddRow":                reflect.ValueOf(tensor.OddRow),
		"OpenCSV":               reflect.ValueOf(tensor.OpenCSV),
		"Projection2DCoords":    reflect.ValueOf(tensor.Projection2DCoords),
		"Projection2DIndex":     reflect.ValueOf(tensor.Projection2DIndex),
		"Projection2DSet":       reflect.ValueOf(tensor.Projection2DSet),
		"Projection2DSetString": reflect.ValueOf(tensor.Projection2DSetString),
		"Projection2DShape":     reflect.ValueOf(tensor.Projection2DShape),
		"Projection2DString":    reflect.ValueOf(tensor.Projection2DString),
		"Projection2DValue":     reflect.ValueOf(tensor.Projection2DValue),
		"ReadCSV":               reflect.ValueOf(tensor.ReadCSV),
		"RowMajorStrides":       reflect.ValueOf(tensor.RowMajorStrides),
		"SaveCSV":               reflect.ValueOf(tensor.SaveCSV),
		"StringToFloat64":       reflect.ValueOf(tensor.StringToFloat64),
		"WriteCSV":              reflect.ValueOf(tensor.WriteCSV),

		// type definitions
		"Bits":   reflect.ValueOf((*tensor.Bits)(nil)),
		"Shape":  reflect.ValueOf((*tensor.Shape)(nil)),
		"String": reflect.ValueOf((*tensor.String)(nil)),
		"Tensor": reflect.ValueOf((*tensor.Tensor)(nil)),

		// interface wrapper definitions
		"_Tensor": reflect.ValueOf((*_cogentcore_org_core_tensor_Tensor)(nil)),
	}
}

// _cogentcore_org_core_tensor_Tensor is an interface wrapper for Tensor type
type _cogentcore_org_core_tensor_Tensor struct {
	IValue            interface{}
	WAt               func(i int, j int) float64
	WClone            func() tensor.Tensor
	WCopyCellsFrom    func(from tensor.Tensor, to int, start int, n int)
	WCopyFrom         func(from tensor.Tensor)
	WCopyMetaData     func(from tensor.Tensor)
	WCopyShapeFrom    func(from tensor.Tensor)
	WDataType         func() reflect.Kind
	WDimSize          func(dim int) int
	WDims             func() (r int, c int)
	WFloat            func(i []int) float64
	WFloat1D          func(i int) float64
	WFloatRowCell     func(row int, cell int) float64
	WFloats           func(flt *[]float64)
	WIsString         func() bool
	WLen              func() int
	WMetaData         func(key string) (string, bool)
	WMetaDataMap      func() map[string]string
	WNumDims          func() int
	WRange            func() (min float64, max float64, minIndex int, maxIndex int)
	WRowCellSize      func() (rows int, cells int)
	WSetFloat         func(i []int, val float64)
	WSetFloat1D       func(i int, val float64)
	WSetFloatRowCell  func(row int, cell int, val float64)
	WSetFloats        func(vals []float64)
	WSetMetaData      func(key string, val string)
	WSetNumRows       func(rows int)
	WSetShape         func(sizes []int, names ...string)
	WSetString        func(i []int, val string)
	WSetString1D      func(i int, val string)
	WSetStringRowCell func(row int, cell int, val string)
	WSetZeros         func()
	WShape            func() *tensor.Shape
	WString           func() string
	WString1D         func(i int) string
	WStringRowCell    func(row int, cell int) string
	WStringValue      func(i []int) string
	WSubSpace         func(offs []int) tensor.Tensor
	WT                func() mat.Matrix
}

func (W _cogentcore_org_core_tensor_Tensor) At(i int, j int) float64 { return W.WAt(i, j) }
func (W _cogentcore_org_core_tensor_Tensor) Clone() tensor.Tensor    { return W.WClone() }
func (W _cogentcore_org_core_tensor_Tensor) CopyCellsFrom(from tensor.Tensor, to int, start int, n int) {
	W.WCopyCellsFrom(from, to, start, n)
}
func (W _cogentcore_org_core_tensor_Tensor) CopyFrom(from tensor.Tensor)      { W.WCopyFrom(from) }
func (W _cogentcore_org_core_tensor_Tensor) CopyMetaData(from tensor.Tensor)  { W.WCopyMetaData(from) }
func (W _cogentcore_org_core_tensor_Tensor) CopyShapeFrom(from tensor.Tensor) { W.WCopyShapeFrom(from) }
func (W _cogentcore_org_core_tensor_Tensor) DataType() reflect.Kind           { return W.WDataType() }
func (W _cogentcore_org_core_tensor_Tensor) DimSize(dim int) int              { return W.WDimSize(dim) }
func (W _cogentcore_org_core_tensor_Tensor) Dims() (r int, c int)             { return W.WDims() }
func (W _cogentcore_org_core_tensor_Tensor) Float(i []int) float64            { return W.WFloat(i) }
func (W _cogentcore_org_core_tensor_Tensor) Float1D(i int) float64            { return W.WFloat1D(i) }
func (W _cogentcore_org_core_tensor_Tensor) FloatRowCell(row int, cell int) float64 {
	return W.WFloatRowCell(row, cell)
}
func (W _cogentcore_org_core_tensor_Tensor) Floats(flt *[]float64) { W.WFloats(flt) }
func (W _cogentcore_org_core_tensor_Tensor) IsString() bool        { return W.WIsString() }
func (W _cogentcore_org_core_tensor_Tensor) Len() int              { return W.WLen() }
func (W _cogentcore_org_core_tensor_Tensor) MetaData(key string) (string, bool) {
	return W.WMetaData(key)
}
func (W _cogentcore_org_core_tensor_Tensor) MetaDataMap() map[string]string { return W.WMetaDataMap() }
func (W _cogentcore_org_core_tensor_Tensor) NumDims() int                   { return W.WNumDims() }
func (W _cogentcore_org_core_tensor_Tensor) Range() (min float64, max float64, minIndex int, maxIndex int) {
	return W.WRange()
}
func (W _cogentcore_org_core_tensor_Tensor) RowCellSize() (rows int, cells int) {
	return W.WRowCellSize()
}
func (W _cogentcore_org_core_tensor_Tensor) SetFloat(i []int, val float64) { W.WSetFloat(i, val) }
func (W _cogentcore_org_core_tensor_Tensor) SetFloat1D(i int, val float64) { W.WSetFloat1D(i, val) }
func (W _cogentcore_org_core_tensor_Tensor) SetFloatRowCell(row int, cell int, val float64) {
	W.WSetFloatRowCell(row, cell, val)
}
func (W _cogentcore_org_core_tensor_Tensor) SetFloats(vals []float64) { W.WSetFloats(vals) }
func (W _cogentcore_org_core_tensor_Tensor) SetMetaData(key string, val string) {
	W.WSetMetaData(key, val)
}
func (W _cogentcore_org_core_tensor_Tensor) SetNumRows(rows int) { W.WSetNumRows(rows) }
func (W _cogentcore_org_core_tensor_Tensor) SetShape(sizes []int, names ...string) {
	W.WSetShape(sizes, names...)
}
func (W _cogentcore_org_core_tensor_Tensor) SetString(i []int, val string) { W.WSetString(i, val) }
func (W _cogentcore_org_core_tensor_Tensor) SetString1D(i int, val string) { W.WSetString1D(i, val) }
func (W _cogentcore_org_core_tensor_Tensor) SetStringRowCell(row int, cell int, val string) {
	W.WSetStringRowCell(row, cell, val)
}
func (W _cogentcore_org_core_tensor_Tensor) SetZeros()            { W.WSetZeros() }
func (W _cogentcore_org_core_tensor_Tensor) Shape() *tensor.Shape { return W.WShape() }
func (W _cogentcore_org_core_tensor_Tensor) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _cogentcore_org_core_tensor_Tensor) String1D(i int) string { return W.WString1D(i) }
func (W _cogentcore_org_core_tensor_Tensor) StringRowCell(row int, cell int) string {
	return W.WStringRowCell(row, cell)
}
func (W _cogentcore_org_core_tensor_Tensor) StringValue(i []int) string { return W.WStringValue(i) }
func (W _cogentcore_org_core_tensor_Tensor) SubSpace(offs []int) tensor.Tensor {
	return W.WSubSpace(offs)
}
func (W _cogentcore_org_core_tensor_Tensor) T() mat.Matrix { return W.WT() }
