// Code generated by 'yaegi extract cogentcore.org/core/tensor/tensorview'. DO NOT EDIT.

package imports

import (
	"cogentcore.org/core/tensor/tensorview"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/tensorview/tensorview"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"LabelSpace":       reflect.ValueOf(tensorview.LabelSpace),
		"NewSimMatButton":  reflect.ValueOf(tensorview.NewSimMatButton),
		"NewSimMatGrid":    reflect.ValueOf(tensorview.NewSimMatGrid),
		"NewTable":         reflect.ValueOf(tensorview.NewTable),
		"NewTableButton":   reflect.ValueOf(tensorview.NewTableButton),
		"NewTensorButton":  reflect.ValueOf(tensorview.NewTensorButton),
		"NewTensorGrid":    reflect.ValueOf(tensorview.NewTensorGrid),
		"SimMatButtonType": reflect.ValueOf(&tensorview.SimMatButtonType).Elem(),
		"SimMatGridType":   reflect.ValueOf(&tensorview.SimMatGridType).Elem(),
		"TableButtonType":  reflect.ValueOf(&tensorview.TableButtonType).Elem(),
		"TableType":        reflect.ValueOf(&tensorview.TableType).Elem(),
		"TensorButtonType": reflect.ValueOf(&tensorview.TensorButtonType).Elem(),
		"TensorGridType":   reflect.ValueOf(&tensorview.TensorGridType).Elem(),

		// type definitions
		"SimMatButton":  reflect.ValueOf((*tensorview.SimMatButton)(nil)),
		"SimMatGrid":    reflect.ValueOf((*tensorview.SimMatGrid)(nil)),
		"Table":         reflect.ValueOf((*tensorview.Table)(nil)),
		"TableButton":   reflect.ValueOf((*tensorview.TableButton)(nil)),
		"TensorButton":  reflect.ValueOf((*tensorview.TensorButton)(nil)),
		"TensorDisplay": reflect.ValueOf((*tensorview.TensorDisplay)(nil)),
		"TensorGrid":    reflect.ValueOf((*tensorview.TensorGrid)(nil)),
		"TensorLayout":  reflect.ValueOf((*tensorview.TensorLayout)(nil)),
	}
}
