// Code generated by 'yaegi extract cogentcore.org/core/tensor/stats/metric'. DO NOT EDIT.

package imports

import (
	"cogentcore.org/core/tensor/stats/metric"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/stats/metric/metric"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs":                reflect.ValueOf(metric.Abs),
		"Abs32":              reflect.ValueOf(metric.Abs32),
		"Abs64":              reflect.ValueOf(metric.Abs64),
		"ClosestRow32":       reflect.ValueOf(metric.ClosestRow32),
		"ClosestRow32Py":     reflect.ValueOf(metric.ClosestRow32Py),
		"ClosestRow64":       reflect.ValueOf(metric.ClosestRow64),
		"ClosestRow64Py":     reflect.ValueOf(metric.ClosestRow64Py),
		"Correlation":        reflect.ValueOf(metric.Correlation),
		"Correlation32":      reflect.ValueOf(metric.Correlation32),
		"Correlation64":      reflect.ValueOf(metric.Correlation64),
		"Cosine":             reflect.ValueOf(metric.Cosine),
		"Cosine32":           reflect.ValueOf(metric.Cosine32),
		"Cosine64":           reflect.ValueOf(metric.Cosine64),
		"Covariance":         reflect.ValueOf(metric.Covariance),
		"Covariance32":       reflect.ValueOf(metric.Covariance32),
		"Covariance64":       reflect.ValueOf(metric.Covariance64),
		"CrossEntropy":       reflect.ValueOf(metric.CrossEntropy),
		"CrossEntropy32":     reflect.ValueOf(metric.CrossEntropy32),
		"CrossEntropy64":     reflect.ValueOf(metric.CrossEntropy64),
		"Euclidean":          reflect.ValueOf(metric.Euclidean),
		"Euclidean32":        reflect.ValueOf(metric.Euclidean32),
		"Euclidean64":        reflect.ValueOf(metric.Euclidean64),
		"EuclideanBinTol":    reflect.ValueOf(metric.EuclideanBinTol),
		"EuclideanBinTol32":  reflect.ValueOf(metric.EuclideanBinTol32),
		"EuclideanBinTol64":  reflect.ValueOf(metric.EuclideanBinTol64),
		"Hamming":            reflect.ValueOf(metric.Hamming),
		"Hamming32":          reflect.ValueOf(metric.Hamming32),
		"Hamming64":          reflect.ValueOf(metric.Hamming64),
		"Increasing":         reflect.ValueOf(metric.Increasing),
		"InnerProduct":       reflect.ValueOf(metric.InnerProduct),
		"InnerProduct32":     reflect.ValueOf(metric.InnerProduct32),
		"InnerProduct64":     reflect.ValueOf(metric.InnerProduct64),
		"InvCorrelation":     reflect.ValueOf(metric.InvCorrelation),
		"InvCorrelation32":   reflect.ValueOf(metric.InvCorrelation32),
		"InvCorrelation64":   reflect.ValueOf(metric.InvCorrelation64),
		"InvCosine":          reflect.ValueOf(metric.InvCosine),
		"InvCosine32":        reflect.ValueOf(metric.InvCosine32),
		"InvCosine64":        reflect.ValueOf(metric.InvCosine64),
		"StdFunc32":          reflect.ValueOf(metric.StdFunc32),
		"StdFunc64":          reflect.ValueOf(metric.StdFunc64),
		"StdMetricsN":        reflect.ValueOf(metric.StdMetricsN),
		"StdMetricsValues":   reflect.ValueOf(metric.StdMetricsValues),
		"SumSquares":         reflect.ValueOf(metric.SumSquares),
		"SumSquares32":       reflect.ValueOf(metric.SumSquares32),
		"SumSquares64":       reflect.ValueOf(metric.SumSquares64),
		"SumSquaresBinTol":   reflect.ValueOf(metric.SumSquaresBinTol),
		"SumSquaresBinTol32": reflect.ValueOf(metric.SumSquaresBinTol32),
		"SumSquaresBinTol64": reflect.ValueOf(metric.SumSquaresBinTol64),
		"Tolerance32":        reflect.ValueOf(metric.Tolerance32),
		"Tolerance64":        reflect.ValueOf(metric.Tolerance64),

		// type definitions
		"Func32":     reflect.ValueOf((*metric.Func32)(nil)),
		"Func64":     reflect.ValueOf((*metric.Func64)(nil)),
		"StdMetrics": reflect.ValueOf((*metric.StdMetrics)(nil)),
	}
}
