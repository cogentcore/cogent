// Code generated by "core generate"; DO NOT EDIT.

package canvas

import (
	"cogentcore.org/core/enums"
)

var _ActionsValues = []Actions{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

// ActionsN is the highest valid value for type Actions, plus one.
const ActionsN Actions = 12

var _ActionsValueMap = map[string]Actions{`NoAction`: 0, `Move`: 1, `Reshape`: 2, `Rotate`: 3, `BoxSelect`: 4, `SetStrokeColor`: 5, `SetFillColor`: 6, `NewElement`: 7, `NewText`: 8, `NewPath`: 9, `NodeMove`: 10, `CtrlMove`: 11}

var _ActionsDescMap = map[Actions]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``, 6: ``, 7: ``, 8: ``, 9: ``, 10: ``, 11: ``}

var _ActionsMap = map[Actions]string{0: `NoAction`, 1: `Move`, 2: `Reshape`, 3: `Rotate`, 4: `BoxSelect`, 5: `SetStrokeColor`, 6: `SetFillColor`, 7: `NewElement`, 8: `NewText`, 9: `NewPath`, 10: `NodeMove`, 11: `CtrlMove`}

// String returns the string representation of this Actions value.
func (i Actions) String() string { return enums.String(i, _ActionsMap) }

// SetString sets the Actions value from its string representation,
// and returns an error if the string is invalid.
func (i *Actions) SetString(s string) error {
	return enums.SetString(i, s, _ActionsValueMap, "Actions")
}

// Int64 returns the Actions value as an int64.
func (i Actions) Int64() int64 { return int64(i) }

// SetInt64 sets the Actions value from an int64.
func (i *Actions) SetInt64(in int64) { *i = Actions(in) }

// Desc returns the description of the Actions value.
func (i Actions) Desc() string { return enums.Desc(i, _ActionsDescMap) }

// ActionsValues returns all possible values for the type Actions.
func ActionsValues() []Actions { return _ActionsValues }

// Values returns all possible values for the type Actions.
func (i Actions) Values() []enums.Enum { return enums.Values(_ActionsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Actions) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Actions) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Actions") }

var _AlignAnchorsValues = []AlignAnchors{0, 1, 2, 3}

// AlignAnchorsN is the highest valid value for type AlignAnchors, plus one.
const AlignAnchorsN AlignAnchors = 4

var _AlignAnchorsValueMap = map[string]AlignAnchors{`AlignFirst`: 0, `AlignLast`: 1, `AlignDrawing`: 2, `AlignSelectBox`: 3}

var _AlignAnchorsDescMap = map[AlignAnchors]string{0: ``, 1: ``, 2: ``, 3: ``}

var _AlignAnchorsMap = map[AlignAnchors]string{0: `AlignFirst`, 1: `AlignLast`, 2: `AlignDrawing`, 3: `AlignSelectBox`}

// String returns the string representation of this AlignAnchors value.
func (i AlignAnchors) String() string { return enums.String(i, _AlignAnchorsMap) }

// SetString sets the AlignAnchors value from its string representation,
// and returns an error if the string is invalid.
func (i *AlignAnchors) SetString(s string) error {
	return enums.SetString(i, s, _AlignAnchorsValueMap, "AlignAnchors")
}

// Int64 returns the AlignAnchors value as an int64.
func (i AlignAnchors) Int64() int64 { return int64(i) }

// SetInt64 sets the AlignAnchors value from an int64.
func (i *AlignAnchors) SetInt64(in int64) { *i = AlignAnchors(in) }

// Desc returns the description of the AlignAnchors value.
func (i AlignAnchors) Desc() string { return enums.Desc(i, _AlignAnchorsDescMap) }

// AlignAnchorsValues returns all possible values for the type AlignAnchors.
func AlignAnchorsValues() []AlignAnchors { return _AlignAnchorsValues }

// Values returns all possible values for the type AlignAnchors.
func (i AlignAnchors) Values() []enums.Enum { return enums.Values(_AlignAnchorsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i AlignAnchors) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *AlignAnchors) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "AlignAnchors")
}

var _AlignsValues = []Aligns{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

// AlignsN is the highest valid value for type Aligns, plus one.
const AlignsN Aligns = 12

var _AlignsValueMap = map[string]Aligns{`align-right-anchor`: 0, `align-left`: 1, `align-center`: 2, `align-right`: 3, `align-left-anchor`: 4, `align-baseline-horiz`: 5, `align-bottom-anchor`: 6, `align-top`: 7, `align-middle`: 8, `align-bottom`: 9, `align-top-anchor`: 10, `align-baseline-vert`: 11}

var _AlignsDescMap = map[Aligns]string{0: `align right edges to left edge of anchor item`, 1: `align left edges`, 2: `align horizontal centers`, 3: `align right edges`, 4: `align left edges to right edge of anchor item`, 5: `align left text baseline edges`, 6: `align bottom edges to top edge of anchor item`, 7: `align top edges`, 8: `align middle vertical point`, 9: `align bottom edges`, 10: `align top edges to bottom edge of anchor item`, 11: `align baseline points vertically`}

var _AlignsMap = map[Aligns]string{0: `align-right-anchor`, 1: `align-left`, 2: `align-center`, 3: `align-right`, 4: `align-left-anchor`, 5: `align-baseline-horiz`, 6: `align-bottom-anchor`, 7: `align-top`, 8: `align-middle`, 9: `align-bottom`, 10: `align-top-anchor`, 11: `align-baseline-vert`}

// String returns the string representation of this Aligns value.
func (i Aligns) String() string { return enums.String(i, _AlignsMap) }

// SetString sets the Aligns value from its string representation,
// and returns an error if the string is invalid.
func (i *Aligns) SetString(s string) error { return enums.SetString(i, s, _AlignsValueMap, "Aligns") }

// Int64 returns the Aligns value as an int64.
func (i Aligns) Int64() int64 { return int64(i) }

// SetInt64 sets the Aligns value from an int64.
func (i *Aligns) SetInt64(in int64) { *i = Aligns(in) }

// Desc returns the description of the Aligns value.
func (i Aligns) Desc() string { return enums.Desc(i, _AlignsDescMap) }

// AlignsValues returns all possible values for the type Aligns.
func AlignsValues() []Aligns { return _AlignsValues }

// Values returns all possible values for the type Aligns.
func (i Aligns) Values() []enums.Enum { return enums.Values(_AlignsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Aligns) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Aligns) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Aligns") }

var _BBoxPointsValues = []BBoxPoints{0, 1, 2, 3, 4, 5}

// BBoxPointsN is the highest valid value for type BBoxPoints, plus one.
const BBoxPointsN BBoxPoints = 6

var _BBoxPointsValueMap = map[string]BBoxPoints{`BBLeft`: 0, `BBCenter`: 1, `BBRight`: 2, `BBTop`: 3, `BBMiddle`: 4, `BBBottom`: 5}

var _BBoxPointsDescMap = map[BBoxPoints]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``}

var _BBoxPointsMap = map[BBoxPoints]string{0: `BBLeft`, 1: `BBCenter`, 2: `BBRight`, 3: `BBTop`, 4: `BBMiddle`, 5: `BBBottom`}

// String returns the string representation of this BBoxPoints value.
func (i BBoxPoints) String() string { return enums.String(i, _BBoxPointsMap) }

// SetString sets the BBoxPoints value from its string representation,
// and returns an error if the string is invalid.
func (i *BBoxPoints) SetString(s string) error {
	return enums.SetString(i, s, _BBoxPointsValueMap, "BBoxPoints")
}

// Int64 returns the BBoxPoints value as an int64.
func (i BBoxPoints) Int64() int64 { return int64(i) }

// SetInt64 sets the BBoxPoints value from an int64.
func (i *BBoxPoints) SetInt64(in int64) { *i = BBoxPoints(in) }

// Desc returns the description of the BBoxPoints value.
func (i BBoxPoints) Desc() string { return enums.Desc(i, _BBoxPointsDescMap) }

// BBoxPointsValues returns all possible values for the type BBoxPoints.
func BBoxPointsValues() []BBoxPoints { return _BBoxPointsValues }

// Values returns all possible values for the type BBoxPoints.
func (i BBoxPoints) Values() []enums.Enum { return enums.Values(_BBoxPointsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i BBoxPoints) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *BBoxPoints) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "BBoxPoints")
}

var _MarkerColorsValues = []MarkerColors{0, 1, 2}

// MarkerColorsN is the highest valid value for type MarkerColors, plus one.
const MarkerColorsN MarkerColors = 3

var _MarkerColorsValueMap = map[string]MarkerColors{`Def`: 0, `Copy`: 1, `Cust`: 2}

var _MarkerColorsDescMap = map[MarkerColors]string{0: `use the default color of marker (typically black)`, 1: `copy color of object using marker (create separate marker object per element)`, 2: `marker has its own separate custom color`}

var _MarkerColorsMap = map[MarkerColors]string{0: `Def`, 1: `Copy`, 2: `Cust`}

// String returns the string representation of this MarkerColors value.
func (i MarkerColors) String() string { return enums.String(i, _MarkerColorsMap) }

// SetString sets the MarkerColors value from its string representation,
// and returns an error if the string is invalid.
func (i *MarkerColors) SetString(s string) error {
	return enums.SetString(i, s, _MarkerColorsValueMap, "MarkerColors")
}

// Int64 returns the MarkerColors value as an int64.
func (i MarkerColors) Int64() int64 { return int64(i) }

// SetInt64 sets the MarkerColors value from an int64.
func (i *MarkerColors) SetInt64(in int64) { *i = MarkerColors(in) }

// Desc returns the description of the MarkerColors value.
func (i MarkerColors) Desc() string { return enums.Desc(i, _MarkerColorsDescMap) }

// MarkerColorsValues returns all possible values for the type MarkerColors.
func MarkerColorsValues() []MarkerColors { return _MarkerColorsValues }

// Values returns all possible values for the type MarkerColors.
func (i MarkerColors) Values() []enums.Enum { return enums.Values(_MarkerColorsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i MarkerColors) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *MarkerColors) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "MarkerColors")
}

var _PaintTypesValues = []PaintTypes{0, 1, 2, 3, 4}

// PaintTypesN is the highest valid value for type PaintTypes, plus one.
const PaintTypesN PaintTypes = 5

var _PaintTypesValueMap = map[string]PaintTypes{`Off`: 0, `Solid`: 1, `Linear`: 2, `Radial`: 3, `Inherit`: 4}

var _PaintTypesDescMap = map[PaintTypes]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``}

var _PaintTypesMap = map[PaintTypes]string{0: `Off`, 1: `Solid`, 2: `Linear`, 3: `Radial`, 4: `Inherit`}

// String returns the string representation of this PaintTypes value.
func (i PaintTypes) String() string { return enums.String(i, _PaintTypesMap) }

// SetString sets the PaintTypes value from its string representation,
// and returns an error if the string is invalid.
func (i *PaintTypes) SetString(s string) error {
	return enums.SetString(i, s, _PaintTypesValueMap, "PaintTypes")
}

// Int64 returns the PaintTypes value as an int64.
func (i PaintTypes) Int64() int64 { return int64(i) }

// SetInt64 sets the PaintTypes value from an int64.
func (i *PaintTypes) SetInt64(in int64) { *i = PaintTypes(in) }

// Desc returns the description of the PaintTypes value.
func (i PaintTypes) Desc() string { return enums.Desc(i, _PaintTypesDescMap) }

// PaintTypesValues returns all possible values for the type PaintTypes.
func PaintTypesValues() []PaintTypes { return _PaintTypesValues }

// Values returns all possible values for the type PaintTypes.
func (i PaintTypes) Values() []enums.Enum { return enums.Values(_PaintTypesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i PaintTypes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *PaintTypes) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "PaintTypes")
}

var _StandardSizesValues = []StandardSizes{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}

// StandardSizesN is the highest valid value for type StandardSizes, plus one.
const StandardSizesN StandardSizes = 22

var _StandardSizesValueMap = map[string]StandardSizes{`CustomSize`: 0, `Img1280x720`: 1, `Img1920x1080`: 2, `Img3840x2160`: 3, `Img7680x4320`: 4, `Img1024x768`: 5, `Img720x480`: 6, `Img640x480`: 7, `Img320x240`: 8, `A4`: 9, `USLetter`: 10, `USLegal`: 11, `A0`: 12, `A1`: 13, `A2`: 14, `A3`: 15, `A5`: 16, `A6`: 17, `A7`: 18, `A8`: 19, `A9`: 20, `A10`: 21}

var _StandardSizesDescMap = map[StandardSizes]string{0: `CustomSize = nonstandard`, 1: `Image 1280x720 Px = 720p`, 2: `Image 1920x1080 Px = 1080p HD`, 3: `Image 3840x2160 Px = 4K`, 4: `Image 7680x4320 Px = 8K`, 5: `Image 1024x768 Px = XGA`, 6: `Image 720x480 Px = DVD`, 7: `Image 640x480 Px = VGA`, 8: `Image 320x240 Px = old CRT`, 9: `A4 = 210 x 297 mm`, 10: `USLetter = 8.5 x 11 in = 612 x 792 pt`, 11: `USLegal = 8.5 x 14 in = 612 x 1008 pt`, 12: `A0 = 841 x 1189 mm`, 13: `A1 = 594 x 841 mm`, 14: `A2 = 420 x 594 mm`, 15: `A3 = 297 x 420 mm`, 16: `A5 = 148 x 210 mm`, 17: `A6 = 105 x 148 mm`, 18: `A7 = 74 x 105`, 19: `A8 = 52 x 74 mm`, 20: `A9 = 37 x 52`, 21: `A10 = 26 x 37`}

var _StandardSizesMap = map[StandardSizes]string{0: `CustomSize`, 1: `Img1280x720`, 2: `Img1920x1080`, 3: `Img3840x2160`, 4: `Img7680x4320`, 5: `Img1024x768`, 6: `Img720x480`, 7: `Img640x480`, 8: `Img320x240`, 9: `A4`, 10: `USLetter`, 11: `USLegal`, 12: `A0`, 13: `A1`, 14: `A2`, 15: `A3`, 16: `A5`, 17: `A6`, 18: `A7`, 19: `A8`, 20: `A9`, 21: `A10`}

// String returns the string representation of this StandardSizes value.
func (i StandardSizes) String() string { return enums.String(i, _StandardSizesMap) }

// SetString sets the StandardSizes value from its string representation,
// and returns an error if the string is invalid.
func (i *StandardSizes) SetString(s string) error {
	return enums.SetString(i, s, _StandardSizesValueMap, "StandardSizes")
}

// Int64 returns the StandardSizes value as an int64.
func (i StandardSizes) Int64() int64 { return int64(i) }

// SetInt64 sets the StandardSizes value from an int64.
func (i *StandardSizes) SetInt64(in int64) { *i = StandardSizes(in) }

// Desc returns the description of the StandardSizes value.
func (i StandardSizes) Desc() string { return enums.Desc(i, _StandardSizesDescMap) }

// StandardSizesValues returns all possible values for the type StandardSizes.
func StandardSizesValues() []StandardSizes { return _StandardSizesValues }

// Values returns all possible values for the type StandardSizes.
func (i StandardSizes) Values() []enums.Enum { return enums.Values(_StandardSizesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i StandardSizes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *StandardSizes) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "StandardSizes")
}

var _SpritesValues = []Sprites{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25}

// SpritesN is the highest valid value for type Sprites, plus one.
const SpritesN Sprites = 26

var _SpritesValueMap = map[string]Sprites{`unknown`: 0, `reshape-b-box`: 1, `sel-b-box`: 2, `node-point`: 3, `node-ctrl`: 4, `rubber-band`: 5, `align-match`: 6, `up-l`: 7, `up-c`: 8, `up-r`: 9, `dn-l`: 10, `dn-c`: 11, `dn-r`: 12, `lf-m`: 13, `rt-m`: 14, `move-to`: 15, `line-to`: 16, `cube-to`: 17, `quad-to`: 18, `arc-to`: 19, `close`: 20, `start`: 21, `end`: 22, `quad1`: 23, `cube1`: 24, `cube2`: 25}

var _SpritesDescMap = map[Sprites]string{0: `SpUnknown is an unknown sprite type`, 1: `SpReshapeBBox is a reshape bbox -- the overall active selection BBox for active manipulation`, 2: `SpSelBBox is a selection bounding box -- display only`, 3: `SpNodePoint is a main coordinate point for path node`, 4: `SpNodeCtrl is a control coordinate point for path node`, 5: `SpRubberBand is the draggable selection box`, 6: `SpAlignMatch is an alignment match (n of these), subtyp is actually BBoxPoints so we just hack cast that`, 7: `Sprite bounding boxes are set as a &#34;bbox&#34; property on sprites`, 8: ``, 9: ``, 10: ``, 11: ``, 12: ``, 13: ``, 14: ``, 15: `Node points`, 16: ``, 17: ``, 18: ``, 19: ``, 20: ``, 21: ``, 22: ``, 23: ``, 24: ``, 25: ``}

var _SpritesMap = map[Sprites]string{0: `unknown`, 1: `reshape-b-box`, 2: `sel-b-box`, 3: `node-point`, 4: `node-ctrl`, 5: `rubber-band`, 6: `align-match`, 7: `up-l`, 8: `up-c`, 9: `up-r`, 10: `dn-l`, 11: `dn-c`, 12: `dn-r`, 13: `lf-m`, 14: `rt-m`, 15: `move-to`, 16: `line-to`, 17: `cube-to`, 18: `quad-to`, 19: `arc-to`, 20: `close`, 21: `start`, 22: `end`, 23: `quad1`, 24: `cube1`, 25: `cube2`}

// String returns the string representation of this Sprites value.
func (i Sprites) String() string { return enums.String(i, _SpritesMap) }

// SetString sets the Sprites value from its string representation,
// and returns an error if the string is invalid.
func (i *Sprites) SetString(s string) error {
	return enums.SetString(i, s, _SpritesValueMap, "Sprites")
}

// Int64 returns the Sprites value as an int64.
func (i Sprites) Int64() int64 { return int64(i) }

// SetInt64 sets the Sprites value from an int64.
func (i *Sprites) SetInt64(in int64) { *i = Sprites(in) }

// Desc returns the description of the Sprites value.
func (i Sprites) Desc() string { return enums.Desc(i, _SpritesDescMap) }

// SpritesValues returns all possible values for the type Sprites.
func SpritesValues() []Sprites { return _SpritesValues }

// Values returns all possible values for the type Sprites.
func (i Sprites) Values() []enums.Enum { return enums.Values(_SpritesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Sprites) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Sprites) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Sprites") }

var _ToolsValues = []Tools{0, 1, 2, 3, 4, 5}

// ToolsN is the highest valid value for type Tools, plus one.
const ToolsN Tools = 6

var _ToolsValueMap = map[string]Tools{`SelectTool`: 0, `NodeTool`: 1, `RectTool`: 2, `EllipseTool`: 3, `BezierTool`: 4, `TextTool`: 5}

var _ToolsDescMap = map[Tools]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``}

var _ToolsMap = map[Tools]string{0: `SelectTool`, 1: `NodeTool`, 2: `RectTool`, 3: `EllipseTool`, 4: `BezierTool`, 5: `TextTool`}

// String returns the string representation of this Tools value.
func (i Tools) String() string { return enums.String(i, _ToolsMap) }

// SetString sets the Tools value from its string representation,
// and returns an error if the string is invalid.
func (i *Tools) SetString(s string) error { return enums.SetString(i, s, _ToolsValueMap, "Tools") }

// Int64 returns the Tools value as an int64.
func (i Tools) Int64() int64 { return int64(i) }

// SetInt64 sets the Tools value from an int64.
func (i *Tools) SetInt64(in int64) { *i = Tools(in) }

// Desc returns the description of the Tools value.
func (i Tools) Desc() string { return enums.Desc(i, _ToolsDescMap) }

// ToolsValues returns all possible values for the type Tools.
func ToolsValues() []Tools { return _ToolsValues }

// Values returns all possible values for the type Tools.
func (i Tools) Values() []enums.Enum { return enums.Values(_ToolsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Tools) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Tools) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Tools") }
