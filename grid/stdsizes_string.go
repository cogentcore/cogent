// Code generated by "stringer -type=StdSizes"; DO NOT EDIT.

package grid

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CustomSize-0]
	_ = x[A4-1]
	_ = x[USLetter-2]
	_ = x[USLegal-3]
	_ = x[A0-4]
	_ = x[A1-5]
	_ = x[A2-6]
	_ = x[A3-7]
	_ = x[A5-8]
	_ = x[A6-9]
	_ = x[A7-10]
	_ = x[A8-11]
	_ = x[A9-12]
	_ = x[A10-13]
	_ = x[StdSizesN-14]
}

const _StdSizes_name = "CustomSizeA4USLetterUSLegalA0A1A2A3A5A6A7A8A9A10StdSizesN"

var _StdSizes_index = [...]uint8{0, 10, 12, 20, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 48, 57}

func (i StdSizes) String() string {
	if i < 0 || i >= StdSizes(len(_StdSizes_index)-1) {
		return "StdSizes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _StdSizes_name[_StdSizes_index[i]:_StdSizes_index[i+1]]
}

func (i *StdSizes) FromString(s string) error {
	for j := 0; j < len(_StdSizes_index)-1; j++ {
		if s == _StdSizes_name[_StdSizes_index[j]:_StdSizes_index[j+1]] {
			*i = StdSizes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: StdSizes")
}
