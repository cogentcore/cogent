// Code generated by "stringer -type=Sprites"; DO NOT EDIT.

package grid

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ReshapeUpL-0]
	_ = x[ReshapeUpC-1]
	_ = x[ReshapeUpR-2]
	_ = x[ReshapeDnL-3]
	_ = x[ReshapeDnC-4]
	_ = x[ReshapeDnR-5]
	_ = x[ReshapeLfM-6]
	_ = x[ReshapeRtM-7]
	_ = x[RubberBandT-8]
	_ = x[RubberBandR-9]
	_ = x[RubberBandL-10]
	_ = x[RubberBandB-11]
	_ = x[AlignMatch1-12]
	_ = x[AlignMatch2-13]
	_ = x[AlignMatch3-14]
	_ = x[AlignMatch4-15]
	_ = x[AlignMatch5-16]
	_ = x[AlignMatch6-17]
	_ = x[AlignMatch7-18]
	_ = x[AlignMatch8-19]
	_ = x[SpritesN-20]
}

const _Sprites_name = "ReshapeUpLReshapeUpCReshapeUpRReshapeDnLReshapeDnCReshapeDnRReshapeLfMReshapeRtMRubberBandTRubberBandRRubberBandLRubberBandBAlignMatch1AlignMatch2AlignMatch3AlignMatch4AlignMatch5AlignMatch6AlignMatch7AlignMatch8SpritesN"

var _Sprites_index = [...]uint8{0, 10, 20, 30, 40, 50, 60, 70, 80, 91, 102, 113, 124, 135, 146, 157, 168, 179, 190, 201, 212, 220}

func (i Sprites) String() string {
	if i < 0 || i >= Sprites(len(_Sprites_index)-1) {
		return "Sprites(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Sprites_name[_Sprites_index[i]:_Sprites_index[i+1]]
}

func (i *Sprites) FromString(s string) error {
	for j := 0; j < len(_Sprites_index)-1; j++ {
		if s == _Sprites_name[_Sprites_index[j]:_Sprites_index[j+1]] {
			*i = Sprites(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Sprites")
}
