// Code generated by "core generate"; DO NOT EDIT.

package cdebug

import (
	"cogentcore.org/core/enums"
)

var _StatusValues = []Status{0, 1, 2, 3, 4, 5, 6, 7}

// StatusN is the highest valid value for type Status, plus one.
const StatusN Status = 8

var _StatusValueMap = map[string]Status{`NotInit`: 0, `Error`: 1, `Building`: 2, `Ready`: 3, `Running`: 4, `Stopped`: 5, `Breakpoint`: 6, `Finished`: 7}

var _StatusDescMap = map[Status]string{0: `NotInit is not initialized`, 1: `Error means the debugger has an error -- usually from building`, 2: `Building is building the exe for debugging`, 3: `Ready means executable is built and ready to start (or restarted)`, 4: `Running means the process is running`, 5: `Stopped means the process has stopped (at a breakpoint, crash, or from single stepping)`, 6: `Breakpoint means the process has stopped at a breakpoint`, 7: `Finished means the process has finished running. See console for output and return value etc`}

var _StatusMap = map[Status]string{0: `NotInit`, 1: `Error`, 2: `Building`, 3: `Ready`, 4: `Running`, 5: `Stopped`, 6: `Breakpoint`, 7: `Finished`}

// String returns the string representation of this Status value.
func (i Status) String() string { return enums.String(i, _StatusMap) }

// SetString sets the Status value from its string representation,
// and returns an error if the string is invalid.
func (i *Status) SetString(s string) error { return enums.SetString(i, s, _StatusValueMap, "Status") }

// Int64 returns the Status value as an int64.
func (i Status) Int64() int64 { return int64(i) }

// SetInt64 sets the Status value from an int64.
func (i *Status) SetInt64(in int64) { *i = Status(in) }

// Desc returns the description of the Status value.
func (i Status) Desc() string { return enums.Desc(i, _StatusDescMap) }

// StatusValues returns all possible values for the type Status.
func StatusValues() []Status { return _StatusValues }

// Values returns all possible values for the type Status.
func (i Status) Values() []enums.Enum { return enums.Values(_StatusValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Status) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Status) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Status") }
