// Code generated by "core generate ./..."; DO NOT EDIT.

package piv

/*

import (
	"sync"

	"github.com/goki/gi/oswin/key"
	"github.com/goki/ki/ki"
	"github.com/goki/pi/pi"
	"cogentcore.org/core/gti"
	"cogentcore.org/core/ordmap"
	"cogentcore.org/core/texteditor"
)

// PiViewType is the [gti.Type] for [PiView]
var PiViewType = gti.AddType(&gti.Type{
	Name:       "cogentcore.org/cogent/code/piv.PiView",
	ShortName:  "piv.PiView",
	IDName:     "pi-view",
	Doc:        "PiView provides the interactive GUI view for constructing and testing the\nlexer and parser",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Parser", &gti.Field{Name: "Parser", Type: "cogentcore.org/core/pi.Parser", LocalType: "pi.Parser", Doc: "the parser we are viewing", Directives: gti.Directives{}, Tag: ""}},
		{"Prefs", &gti.Field{Name: "Prefs", Type: "cogentcore.org/cogent/code/piv.ProjSettings", LocalType: "ProjSettings", Doc: "project settings -- this IS the project file", Directives: gti.Directives{}, Tag: ""}},
		{"Changed", &gti.Field{Name: "Changed", Type: "bool", LocalType: "bool", Doc: "has the root changed?  we receive update signals from root for changes", Directives: gti.Directives{}, Tag: "json:\"-\""}},
		{"FileState", &gti.Field{Name: "FileState", Type: "cogentcore.org/core/pi.FileState", LocalType: "pi.FileState", Doc: "our own dedicated filestate for controlled parsing", Directives: gti.Directives{}, Tag: "json:\"-\""}},
		{"TestBuf", &gti.Field{Name: "TestBuf", Type: "cogentcore.org/core/gi/texteditor.Buf", LocalType: "texteditor.Buf", Doc: "test file buffer", Directives: gti.Directives{}, Tag: "json:\"-\""}},
		{"OutBuf", &gti.Field{Name: "OutBuf", Type: "cogentcore.org/core/gi/texteditor.Buf", LocalType: "texteditor.Buf", Doc: "output buffer -- shows all errors, tracing", Directives: gti.Directives{}, Tag: "json:\"-\""}},
		{"LexBuf", &gti.Field{Name: "LexBuf", Type: "cogentcore.org/core/gi/texteditor.Buf", LocalType: "texteditor.Buf", Doc: "buffer of lexified tokens", Directives: gti.Directives{}, Tag: "json:\"-\""}},
		{"ParseBuf", &gti.Field{Name: "ParseBuf", Type: "cogentcore.org/core/gi/texteditor.Buf", LocalType: "texteditor.Buf", Doc: "buffer of parse info", Directives: gti.Directives{}, Tag: "json:\"-\""}},
		{"KeySeq1", &gti.Field{Name: "KeySeq1", Type: "cogentcore.org/core/events/key.Chord", LocalType: "key.Chord", Doc: "first key in sequence if needs2 key pressed", Directives: gti.Directives{}, Tag: ""}},
		{"OutMonRunning", &gti.Field{Name: "OutMonRunning", Type: "bool", LocalType: "bool", Doc: "is the output monitor running?", Directives: gti.Directives{}, Tag: "json:\"-\""}},
		{"OutMonMu", &gti.Field{Name: "OutMonMu", Type: "sync.Mutex", LocalType: "sync.Mutex", Doc: "mutex for updating, checking output monitor run status", Directives: gti.Directives{}, Tag: "json:\"-\""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Frame", &gti.Field{Name: "Frame", Type: "cogentcore.org/core/gi.Frame", LocalType: "gi.Frame", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &PiView{},
})

// NewPiView adds a new [PiView] with the given name
// to the given parent. If the name is unspecified, it defaults
// to the ID (kebab-case) name of the type, plus the
// [ki.Ki.NumLifetimeChildren] of the given parent.
func NewPiView(par ki.Ki, name ...string) *PiView {
	return par.NewChild(PiViewType, name...).(*PiView)
}

// KiType returns the [*gti.Type] of [PiView]
func (t *PiView) KiType() *gti.Type {
	return PiViewType
}

// New returns a new [*PiView] value
func (t *PiView) New() ki.Ki {
	return &PiView{}
}

// SetParser sets the [PiView.Parser]:
// the parser we are viewing
func (t *PiView) SetParser(v pi.Parser) *PiView {
	t.Parser = v
	return t
}

// SetPrefs sets the [PiView.Settings]:
// project settings -- this IS the project file
func (t *PiView) SetPrefs(v ProjSettings) *PiView {
	t.Settings = v
	return t
}

// SetChanged sets the [PiView.Changed]:
// has the root changed?  we receive update signals from root for changes
func (t *PiView) SetChanged(v bool) *PiView {
	t.Changed = v
	return t
}

// SetFileState sets the [PiView.FileState]:
// our own dedicated filestate for controlled parsing
func (t *PiView) SetFileState(v pi.FileState) *PiView {
	t.FileState = v
	return t
}

// SetTestBuf sets the [PiView.TestBuf]:
// test file buffer
func (t *PiView) SetTestBuf(v texteditor.Buf) *PiView {
	t.TestBuf = v
	return t
}

// SetOutBuf sets the [PiView.OutBuf]:
// output buffer -- shows all errors, tracing
func (t *PiView) SetOutBuf(v texteditor.Buf) *PiView {
	t.OutBuf = v
	return t
}

// SetLexBuf sets the [PiView.LexBuf]:
// buffer of lexified tokens
func (t *PiView) SetLexBuf(v texteditor.Buf) *PiView {
	t.LexBuf = v
	return t
}

// SetParseBuf sets the [PiView.ParseBuf]:
// buffer of parse info
func (t *PiView) SetParseBuf(v texteditor.Buf) *PiView {
	t.ParseBuf = v
	return t
}

// SetKeySeq1 sets the [PiView.KeySeq1]:
// first key in sequence if needs2 key pressed
func (t *PiView) SetKeySeq1(v key.Chord) *PiView {
	t.KeySeq1 = v
	return t
}

// SetOutMonRunning sets the [PiView.OutMonRunning]:
// is the output monitor running?
func (t *PiView) SetOutMonRunning(v bool) *PiView {
	t.OutMonRunning = v
	return t
}

// SetOutMonMu sets the [PiView.OutMonMu]:
// mutex for updating, checking output monitor run status
func (t *PiView) SetOutMonMu(v sync.Mutex) *PiView {
	t.OutMonMu = v
	return t
}

// SetTooltip sets the [PiView.Tooltip]
func (t *PiView) SetTooltip(v string) *PiView {
	t.Tooltip = v
	return t
}

// SetClass sets the [PiView.Class]
func (t *PiView) SetClass(v string) *PiView {
	t.Class = v
	return t
}

// SetCustomContextMenu sets the [PiView.CustomContextMenu]
func (t *PiView) SetCustomContextMenu(v func(m *gi.Scene)) *PiView {
	t.CustomContextMenu = v
	return t
}

// SetLayout sets the [PiView.Lay]
func (t *PiView) SetLayout(v gi.Layouts) *PiView {
	t.Lay = v
	return t
}

// SetStackTop sets the [PiView.StackTop]
func (t *PiView) SetStackTop(v int) *PiView {
	t.StackTop = v
	return t
}

// SetStripes sets the [PiView.Stripes]
func (t *PiView) SetStripes(v gi.Stripes) *PiView {
	t.Stripes = v
	return t
}

*/
