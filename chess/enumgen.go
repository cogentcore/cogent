// Code generated by "core generate"; DO NOT EDIT.

package chess

import (
	"cogentcore.org/core/enums"
)

var _ModesValues = []Modes{0, 1, 2}

// ModesN is the highest valid value for type Modes, plus one.
const ModesN Modes = 3

var _ModesValueMap = map[string]Modes{`Pass and play`: 0, `Computer`: 1, `Online`: 2}

var _ModesDescMap = map[Modes]string{0: `ModePassAndPlay is a chess game played locally between two players.`, 1: `ModeComputer is a chess game played against the computer (bot/AI).`, 2: `ModeOnline is a chess game played online through the Lichess API.`}

var _ModesMap = map[Modes]string{0: `Pass and play`, 1: `Computer`, 2: `Online`}

// String returns the string representation of this Modes value.
func (i Modes) String() string { return enums.String(i, _ModesMap) }

// SetString sets the Modes value from its string representation,
// and returns an error if the string is invalid.
func (i *Modes) SetString(s string) error { return enums.SetString(i, s, _ModesValueMap, "Modes") }

// Int64 returns the Modes value as an int64.
func (i Modes) Int64() int64 { return int64(i) }

// SetInt64 sets the Modes value from an int64.
func (i *Modes) SetInt64(in int64) { *i = Modes(in) }

// Desc returns the description of the Modes value.
func (i Modes) Desc() string { return enums.Desc(i, _ModesDescMap) }

// ModesValues returns all possible values for the type Modes.
func ModesValues() []Modes { return _ModesValues }

// Values returns all possible values for the type Modes.
func (i Modes) Values() []enums.Enum { return enums.Values(_ModesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Modes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Modes) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Modes") }
